1:
    slug: software-development-frustration
    title: Is your software development function a source of frustration?
    summary: "It's not Inevitable:  development CAN pay."
    date: 2015-08-20
    youtube_id: JkVr2DJM3Ac
    body: |-

        If you're a **Lead Developer**... or a **Product Owner**...

        ... and *especially* if you're a **CTO** or **Business Owner**...

        ... I'd be surprised if you're 100% happy.

        It's not Inevitable. Some teams have figured it out. Software Development can be an efficient and effective process.

        Development can pay.

        Find out more in this short video.


    transcript: |-

        My name is Gary Straughan. I’m a software developer. But unlike most developers, I come from a business
        background: for the best part of a decade I was a B2B Marketing Manager for a multi-national.

        In 1999 I left it all behind and joined a “DotCom”.

        After a spell as a Business Analyst, I re-discovered a love for writing code.

        For the next few years, it was all about the code. I was driven to learn everything I could.

        But my inner business guy couldn’t be silenced.

        it got to a point where great code was no longer enough.

        I needed to see RESULTS.

        So I started to take notice.

        I started to pay attention... to things that worked well... and to things that got in the way.

        And that’s what **Development** That Pays is all about.

        It’s the Good the Bad and the Ugly that I’ve witnessed first hand from inside the development teams of some well-known companies.

        So join me for Development That Pays.

        Each week - in 5 minutes or less -  I’ll share with you an aspect of software development.

        NOT the *technicalities* of writing code, but the *practicalities* of what it takes to create profitable software.

        If you’ve ever wondered how things are done at the **The Economist** or the **BBC**, you won’t want to
        miss an episode.

        Just enter your email address in the box below... and click the big button.

2:
    slug: not-about-code-its-about-business
    title: It's not about Code. It's about Business.
    summary: It's more important to 'build the right thing' than to 'build it right'.
    date: 2015-09-09
    youtube_id: 8Yx7zF7kjs8
    image: episode2_333.png
    body: |-

        As a Software Engineer, I love to write good quality code.

        But as a former Marketing Manager, I know that there are things that are far more important.

        In this video, I share with you one of my fundamental beliefs about *PROFITABLE* software development:

        It's more important to *build the right thing* than to *build it right*.

        Enjoy the video.

    transcript: |-

        Hi this is Gary Straughan

        Welcome to Development That Pays.

        As a Software Engineer, I love to write good quality code.

        But as a former Marketing Manager, I know that there are things that are far more important.

        Today I want to share with you one of my fundamental beliefs about PROFITABLE software development.

        This is the tale of

        two walls

        and two ladders.

        The ladder on the left is

        Well-designed.

        Well-made.

        It’s beautifully piece of engineering.

        The ladder on the right is

        much more basic.

        it’s nothing more than a few bits of wood nailed together.

        Which of the two ladders is better?

        Clearly, the one on the left.

        HOWEVER...

        It’s important to realise that the key VALUE of a  ladder...

        is not what it IS

        but rather what it DOES.

        What a ladder DOES is get us from one level to another.

        In this case, from point A to point B.

        Which of the two ladders is better?

        The ladder on the left is a better LADDER.

        But both ladders serve roughly the same PURPOSE:

        Both ladders get us from point A to point B.

        Let’s take this one step further.

        Notice that each ladder takes us to a DIFFERENT point B.

        From the evidence in front of us,

          “point B” on the left looks very much like

          “point B” on the right.

        What we’re here missing is the BIGGER PICTURE.

        So let’s take a look at a “bigger picture”.

        That changes everything.

        The beautifully-constructed ladder turns out to be

        an expensive shortcut

        to certain death!

        The rough-and-ready home-made ladder

        turns out to be a cost-effective shortcut to

        untold riches.

        Which of the two ladders is better?

        The well-designed, well-constructed ladder is still a better LADDER

        … but the home-made ladder has provided us with far more VALUE.

        What’s the moral of this story?

        it’s that code - just like a ladder - is a MEANS TO AN END.

        It can be elegant. It can be well-crafted.

        But these things count for nothing…

        ... if the code doesn’t achieve a real business goal.

        Picking the right “wall” is more important than building the perfect “ladder”.

        Put it another way:

        It’s more important to build the right thing

        than to build the thing right.

        Of course, “picking the right thing” is easier said than done.

        We’ll be taking at how to do that in future episodes.

        Talk to you next time.



3:
    slug: without-code-there-is-no-business
    title: Without Code There Is No Business.
    summary: How to use code the RIGHT WAY to validate your business objectives.
    date: 2015-09-16
    youtube_id: om0_KvdaJTg
    body: |-

        In the [last episode](/post/2-not-about-code-its-about-business) I told the tale of two walls and two ladders:

         - The walls represented **business objectives**.
         - The ladders represented **code**.

        The moral of the story was this:

        *It's more important to pick the right WALL than to have a great LADDER.*

        (It’s more important to achieve a real *BUSINESS GOAL* than to produce beautifully crafted, elegant *CODE*.)


        But how do you know?
        ------

        When you're standing at the bottom of the wall, you can't see what lies on the other side.

        You won't know if you've picked the right wall until you climb up there and take a look.


        Climb up and take a look
        ------

        That's what this video is about: the right way - and the wrong way - "to climb up and take a look":

        How to test out your business objectives:

         - without spending a lot of time
         - without spending a lot of money
         - and without upsetting the Development Team

         Enjoy the video.


    transcript: |-

        In the previous episode I told the tale of two walls and two ladders.

        The walls represented business objectives.

        The ladders represented code or software.

        The moral of the story was this:

        It's more important to pick the right WALL than to have a great LADDER.

        In other words…

        it’s more important to achieve a real BUSINESS GOAL
        than to produce beautifully crafted, elegant CODE.

        Having saying that…

        … You may have spotted there is a small problem

        with the “wall and ladder” model.

        The problem is this:

        If you're standing at the bottom of the wall,

        you can’t see over it.

        It’s impossible to know with 100% certainty

        What’s on the other side of the wall.

        The same is true of software development.

        We might think that that a particular new feature

        will be a big success…

        but we can’t know for sure without building it and putting it live.

        Here’s a new wall for us to consider.

        Will it be a good for us?

        Will it lead to great riches?

        It’s impossible to know.

        We have no choice but to start building.

        After a lot of time a time and expense, our beautiful staircase is finally ready.

        And now, at last, we can climb the stairway and discover what lies beyond.

        Alas, we’ve built a stairway - not to heaven - but to certain death.

        Not only have we wasted time and money, but we have a team of disgruntled developers

        annoyed that the beautiful software that they have crafted won’t even be used.

        Let’s rewind time....

        And start again.

        We’re back at the bottom of the wall.

        Our job is get to the top of that wall ...

        and this time…

        we want to do it as quickly and as cheaply as we possibly can.

        A ladder would be a good choice…

        … even if it’s a bit rickety.

        A pile of boxes would also work.

        We scramble to the top… and we take a quick look over the edge.

        The news is not good.

        But  that’s okay:

        - it didn't take as long to get here
        - we didn't spend a lot of money
        - … and we didn’t build any “emotional attachment” to our beautiful creation

        Which means that...

        - We have the TIME
        - we have the MONEY
        - and we have the WILL

        … to try another wall.

        Let’s try another wall.

        This time the news is…

        well, rather excellent.

        We have found a wall that leads to great riches.

        And this is where things get really interesting:

        We now in a position to upgrade.

        We can now AFFORD to swap our piles of boxes...

        ... for an aluminium ladder

        … or a beautiful staircase

        … or even a fabulous escalator


        I hope the message is clear.

        When you’re building something new,

        Avoid the temptation to build it with “everything on”.

        Instead, keep it bare bones.

        Get it built.

        Get it live.

        That’s when you’ll know if it’s a winner.

        If it turns out to be a dud… give yourself a pat on the back:

        you wasted the MINIMUM of time and money.

        If it turns out to be a success… give yourself a pat on the back... And feel free to upgrade.

        Talk to you next time.




4:
    slug: business-plus-code-plus-people
    title: Business + Code + PEOPLE
    index: 4
    summary: The WAY that people work together has a SURPRISING impact on the quality and quantity of the software output.
    date: 2015-09-23
    youtube_id: dP1imJeAwt8
    image: episode4_333.png
    body: |-

        In [Episode 2](/posts/2-not-about-code-its-about-business) we talked about the importance of **business objectives**:
        how it’s more important to satisfy
        **real business goals** than to craft **beautiful code**.

        Then in [Episode 3](/posts/3-without-code-there-is-no-business), we talked the importance of **code itself**:
         how we can’t know for sure that our
        **business objectives** are sound without first **writing some code**.

        In this video, we're going to look at the third pillar of the "Development That Pays" model: the
        **people** that make the whole thing work.

        As you'll see, the quality/quantity/profitability of the software produced depends to an extent on how well individuals
        do their jobs...

        ... and to a *surprising* extent on the way they work together.

        Enjoy the video.

    transcript: |-

        Hi this is Gary

        Welcome back  to Development That Pays.

        In Episode 2 we talked about the importance of business objectives: how it’s more important to satisfy real business goals than to craft beautiful code.

        Then in episode 3, we talked the importance of code itself: how we can’t know for sure that our business objectives are sound without first writing some code.

        Unfortunately - or fortunately, depending upon your viewpoint, we don’t have a business objectives picking machine and we don’t have a code generating machine.

        If we did, we could plug them in and watch super-profitable software pop out of the other side.

        No, we’ve going to need some people. So let me introduce you to a couple of friends of mine: Business Bob and Development Dave

        Business Bob is the product owner.

        In our walls and ladders model, Bob has responsibility for picking walls.

        Development Dave is the Lead Developer.

        Dave has responsibility for stacking boxes… building ladders… and building staircases.

        Roughly speaking, Bob decides what to build…  and Dave (together with his dev team) builds it.

        The quality - and profitability - of the software that Bob and Dave produce… depends on how well they do their individual jobs.

        It also depends - to a surprisingly large extent - on how well they work TOGETHER.

        It’s been my experience that the Bobs and Daves of this world don’t work well together, at least not as well as they might. To illustrate this, let’s look at what happens when they DON'T work together.

        Bob has an idea for a new feature - "Feature X”. He’s spec’ed it out in detail, and hands it over to Dave Dave and his team  set to work. After 4 long weeks, it’s complete and it goes live.

        Only then does Bob see the awful truth. Feature X is a failure. Dave, as you can imagine, is furious. A month’s work down the drain.

        It’s not a happy ending.

        Let’s play out this story again.

        Bob has an idea for a new feature - "Feature X”. Dave comes up with a “minimal” version of X - let’s call it “little x” It takes just 2 days for Dave and his team to get "little x" live.

        Bob can see straight away that “little x” isn’t really working.  So he suggests a change. Dave doesn’t have a problem making the change: after all, “little" x only took a couple of days to build

        The next day, “little y” is live. The initial results are promising. Dave has an idea for an improvement. Bob likes the sound of it. It’s live the next day.

        And so it goes on, with Bob and Dave working together to refine the feature, one small step at a time. Bringing this story to very happy ending.

        Okay - we don’t need Bob and Dave to fall madly in love. But I hope you get the point.

        Talk to you next time.


5:
    slug: the-v-model-and-office-layout
    title: The V Model and Office Layout
    index: 5
    summary: Can the layout of an office have an impact on the software development process?
    date: 2015-09-30
    youtube_id: aM5ksuYOwJA
    image: episode5_333.png
    body: |-

        Can the layout of an office have an impact on the software development process?

        I’ve been lucky enough to work in a range of offices and dev teams, but the office layout at IntuDigital struck me as being  nearly perfect for software development.

        The way work flowed through the office reminded me of a model of software development that I hadn’t thought about for MANY years - a thing called the V-Model

        Enjoy the video.

    transcript: |-

        Hi this is Gary.

        Welcome to Episode 5 of Development That Pays.

        Can the layout of an office have an impact on the software development process?

        I’ve been lucky enough to work in a range of offices and development teams,

        but the office layout at IntuDigital struck me as being nearly perfect for software development.

        The way work flowed through the office reminded me of a model of software development that I hadn’t thought about for many years

        A thing called the V-Model.

        Unusually for me, I can remember exactly where I was when I first heard about it.

        I was right here, in an "Information Systems" lecture.

        The year was 1994.

        In 1994, I hadn’t even heard of the internet!

        Let’s take a look at one version of the V-Model.

        We start with "Requirements Definition”

        Then move on to  "High level design"

        Then on to   "Detailed Design”

        Now that we have the Why What and How, we’re ready to actually  write some code.

        Then things get a little more interesting: we start to move up the other side of the V…

        first with  "Unit Testing”
        then “System Testing"
        and finally "Acceptance testing"

        And now we can see that the “V shape ” is all about  verification and validation:

        As we move back up the right hand side of the V, we VERIFY at each level.

        Unit tests VERIFY that each chunk of code does what it should
        System tests  VERIFY that the  code complies with the high level design
        Acceptance tests VERIFY that it new feature does what it was conceived to do.

        Let’s see how the V-Model works in the IntuDigital office

        The MD sat here

        Beside her, the Product Owner.

        They are perfectly positioned to work together to develop REQUIREMENTS

        Next, the Requirements would make the long journey to a conference room,

        where the product owner  would be joined by

        the project manager
        the lead developer
        one or more of the developers
        and someone from test.

        To thrash out the high level design.

        From this point there was a feeling that the new feature was “heading home”
        - as if it as on a bungee cord.

        The Developer would set to work in an iterative cycle of writing  unit tests,
        writing code and then getting the unit tests to pass.

        And when the the feature was ready, it would move across to Test.

        This is where the central position of the Test Team really paid dividends:

        Something  not working? All they had to do was spin around in their seat and talk directly to the developer.

        Any questions about the interpretation of the spec? Well, the Product Owner and the MD are right across the desk.

        With system level tests complete, there’s just one step remaining:

        that’s the Acceptance test which, - as we just said - is right across the desk!

        Now I come to think of it, most offices I’ve worked in have been arranged a little bit like the left hand side of the V.

        So we might have a product owner,
        beside a lead developer
        beside some developers
        beside some testers

        What’s different here is that the office is optimised for the right hand side of the V.

        Around the  VERIFICATION of each stage.

        It worked really really well.

        Talk to you next time.

6:
    slug: v-model-hidden-secrets
    title: The Hidden Secrets of the V-Model
    summary: "The V-Model is not just about Verification: But there's more to this clever little model than meets the eye..."
    date: 2015-10-07
    youtube_id: cxHySI4uVLs
    body: |-

        The V-Model of Software Development has stood the test of time: it can trace its roots back to the early 90s.

        But it's not just a model of "verification": there's more that it can teach us. (Hint: it's to do with Money!)

        Enjoy the video.

    transcript: |-

        Hi this is Gary. Welcome to Development That Pays.

        In the last episode we touched on a thing called the V-Model of software development.

        This is an interesting little model and there's more to it than meets the eye.

        That's what I'd like to talk to you about today.

        Let's start, though, with a quick review of the V-Model.

        We start at the top left with Requirements Definition.

        Then move into Functional Design.

        Then into Technical Design.

        Finally we're ready to do some Coding.

        And then as we move back up the right hand side of the V, we verify at every stage.

        So Unit Tests verifying the Technical Design.

        System Tests verifying the Functional Design.

        And Acceptance Tests -  or USER Acceptance Tests - verifying the Requirements Definition.

        So the V-Model is really a model of VERIFICATION.

        But there's something else that this clever little model can teach us, and it's the thing that made me sit up and take notice some twenty-odd years ago when I first heard about the V-Model.

        It's that each of these horizontal lines is an indication of the cost of getting it
        wrong.

        So bugs -  unless they’re particularly insidious - are generally quick and simple and therefore cheap for us to rectify.

        But if we've gone and built entirely the wrong thing then of course that's a much more expensive mistake.

        Now as I started to think a little bit more about this this idea of the cost of failure I started to wonder if maybe the V-Model - at least this version of the V-Model was incomplete.

        So I did what I always do in a case like this: I Googled it.

        A search for V-Model brings up no shortage of variations on this theme.

        But what most of them have in common is that they started the top here with something that is Requirements Definition or some
        very close analogue of that and on the right hand side here Acceptance Testing, User Acceptance Testing or, again, something quite like that.

        But I was able to track down version of the V-Model that adds another layer on top. A layer that I like rather a lot.

        On the left hand side our additional box is Business Case.

        On the right hand side is Realisation

        And this goes back to something that I think we talked about in episode three.

        The idea that you never really know that what you've built is right until its live and it's out there and it's being used (or
        not used) as the case may be.

        And if you've got to all the way to that stage before realising that something isn't quite right, then that's the biggest cost of all.

        So I have a question for you: now that you know that, which of these projects would you rather take responsibility for.

        This huge imposing V on the left or the small and perfectly formed V on the right?

        Safer I think to do lots of little V’s than one big huge V.

        Talk to you next time.


7:
    slug: Agile-is-never-having-to-commit-to-a-deadline
    title: Agile is... Never Having To Commit To a Deadline?
    index: 7
    summary: The world of business is full of deadlines. But deadlines and Agile don't seem to mix...
    date: 2015-10-14
    youtube_id: MeYrV_Xm2rI
    image: episode7_333.png
    body: |-

        Picture the scene: a small conference room.

        Present: a Software Development Team, an Agile Coach and a Business Manager.

        The subject: the launch of a new website.

        It was all going well until the Business Manager asked "When will the website be finished?"

        The world of business is full of deadlines. But deadlines and Agile don't seem to mix...

        Enjoy the video.

    transcript: |-


        Are you responsible for a SOFTWARE DEVELOPMENT TEAM?

        Is your team an AGILE Dev Team?

        Have you ever had a “difference of opinion" with your team?

        Or a full-blown argument?

        Were you, by any chance, discussing an important DEADLINE?

        The world of business is full of deadlines… but deadlines don’t necessarily “compute” for an agile team.

        But there may be a way of both sides to get what they need.


        Hi this is Gary, welcome to Development that Pays

        Picture the scene.

        A small conference room at the BBC in White City.

        In attendance, a development team

        our Agile Coach

        and a Business Manager.

        The subject under discussion: a new website for  BBC Worldwide.

        My memory of the first part of the meeting is hazy. But I have a very clear recollection of what happened after the business Manager asked this question:

        When will the website be finished?

        It was clear he wan’t looking for an answer like “ next Spring”. He was looking for a date.

        We turned to our Agile Coach for the official answer. But Mr Agile refused to answer the question.

        Mr Business was taken aback.

        Really? Surely we had some idea?

        After all, the people in the room had has previously build several similar websites. If anyone know how long it would take to create a site very-like-one-we’d built before it was is,

        But the Mr Agile  would not be moved.

        He could not and would not commit to a date.

         Mr Business  was incredulous. Didn’t we realise that launching a website is a bigger thing than just building a website:

        Editors  need to be hired
        Copy  needs to be authored
        Launch partners  need to be engaged

        WE NEED A DATE!

        But Mr Agile would not be moved. The rest of sat in silence staring at our shoes….

        The argument between Mr Business and Mr Agile troubled me. And not just because it was toe-curling awkward.

        Here’s my dillema:

        I agreed with Mr Business : I could see that there needed to be a launch date.

        I also agreed with the  Mr Agile : launch deadlines and the agile approach don't really mix.

        Can the two really co-exist?

        At the time, I really wasn’t sure that they could.

        But I think that maybe they can.

        Let’s take a look.

        I don’t know much about  Mr Busenss' background, but it’s not much of a stretch to say that he was used to working to deadlines: he did, after all, work for a major broadcaster.

        Programmes go out at specific times on specific dates. There’s zero time flexibility.

        So he’s used to projects that start slowly… and ramp up…

        and things would ramp up again as the broadcast date arrived.

        That’s a graph of effort.

        But what about a graph of value?

        More specifically, customer value.

        Well, for almost all of the project, the value to the customer is zero.

        It’s only towards the end of the project that all of the elements come together in a programme.

        In fact, it it’s a  sign of good project management when things DON’T come together until the last minute.

        What about an Agile project?

        What does the customer value curve of an Agile project look like?

        It might be a while before anything worthwhile can be released, so the line starts at zero.

        But it’s not long before something is released*. A very base-bones website, for example.

        Now I’m not suggesting that a bare bones website is released to the public...

        But at this point, and at any point in time after this, we have something that could be released to the public.

        At this early stage the potential customer value - lets call it that -  would be low. Say 10%

        The potential customer value increases as the team adds new features.

        One of the key tenets of Agile is to work on the most important features - the features that add the most customer value - early in the process.

        So the value curve increases quickly as this high value features are added.

        We then enter a phase of diminishing returns as low value features are added.

        Overall we have an s-curve

        We’ve ended up with two very different value curves.

        But can we reconcile them?

        Can we present a picture that Mr Business and Mr Agile can live with?

        Let’s superimpose the lines.

        Clearly this is bad news: the launch is happening way to early

        What about this case?

        Well, the value level is up…  but things are changing fast: it would be tough to predict the level of value on any particular date.

        What about here.

        This is really the sweet spot. And not just because the level of customer value is high.

        the curve here is flat:  the level of customer value is changing slowly. which means that there’s very little difference between launching here and launching here.

        In words that Mr Business would understand:

        the risk of launching in this period is high
        the risk of launching in this period is low

         Mr Agile would never have committed to a “finishing the website on a specific date".

        But he could have drawn a fairly accurate value curve.

        And Mr Business could have used it to fix a launch date.

        Where there was conflict there could have been harmony.

        Talk to you next time.


8:
    slig: You-are-killing-the-daily-stand-up
    title: Are You Killing the Daily Stand-up?
    index: 8
    summary: The Daily Stand-up is a cornerstone of Agile Software Development. And you may be undermining it without even knowing it.
    date: 2015-10-21
    youtube_id: aFLgG8cduiI
    image: episode8_333.png
    body: |-

        The Daily Stand-up is a cornerstone of Agile Software Development. But you - and
        here I'm talking to Product Owners, Product Managers, Business owners - may be undermining it without even knowing it.

        The good news it that it's very easy to fix.

        Enjoy the video.

    transcript: |-

        The daily stand-up - also know as the Daily Scrum or “Huddle”

        is a key element of Agile Development.

        What if I told you that you - yes YOU -

        could be undermining the daily stand-up without even knowing it?

        Not by HOW your doing it - but by WHEN your doing it.

        Hi this is Gary. Welcome to Development That Pays.

        It’s 9:50am.

        Your development team is already hard at work.

        Sorry, couldn’t resist.

        It’s 9:50 am

        John and Sarah have been in for a while. Both have their headphones on.

        John is checking email.

        Sarah is trying to to get some code to pass one last test.

        With a bit of luck she’ll being able to commit the code before Stand-up.

        10:55

        John gets up to go and make himself a cup of tea.

        Kevin strolls in, Costa Coffee in hand.

        Dave - he’s the  Lead Developer - is heading up in the lift.

        He’s cutting it fine. As usual.

        The entire team is gearing up - each in their own way - for the 10 o’clock stand-up.

        The clock ticks around to 10 am.

        And the entire team rises as one.

        Let’s run that again.

        The clock ticks around to 10.

        But no one stands up.

        They’re waiting for something.

        They’re waiting for someone.

        They’re waiting for you.

        But you’re not there. You’re in a meeting.

        You’re always in a meeting.

        But it’s no biggie, you think.

        You’ll be finished in 5 mins.

        You have no idea of the damage you’ve  done.

        Lead Developer Dave is not amused.

        As usual, he’s had a nightmare commute.

        It’s tough for him to get in by 10.

        But most days he manages it - even if it is by the skin of his teeth.

        He made the effort. Why didn’t you?

        Kevin is starting to feel anxious.

        He spent a good part of yesterday afternoon wrestling with a piece of code

        without success.

        Inspiration did not strike overnight.

        He was going to ask for help during stand-up.

        But it doesn’t look like stand-up is going to happen.

        Should he wait?

        Should he start something else?

        He’ll give it another 5 minutes.

        John is just about to start a new ticket.

        But he wasn’t planning to actually start until after stand-up.

        Is there any point starting now?

        Probably not. Facebook.

        Only Sarah is grateful for the delay:

        the extra couple of minutes were enough to get the test to pass and the code committed.

        At the same time,

        she can’t help thinking that “management” doesn’t seem to hold the dev team in very high regard.

        You escape from your meeting and you stride into the room at 10:07 precisely.

        "Let’s do stand-up” you say brightly.

        The Dev Team rise as a single unit.

        And clubs you to death.

        In just seven minutes, the minds of your dev team

        have wandered into all sorts of places.

        Very few of them positive.

        That’s all it took. 7 minutes.

        Let’s fix this right now.

        With two very simple rules around Stand-up.

        Rule Number One

        Stand-ups happen every day at exactly the same time.

        Rule Two

        In cases where you... have a meeting, something comes up,

        you’re delayed getting in to work...

        SEE RULE ONE

        Who’s going to make sure this happens? You are.

        But not directly.

        You’re way too much of a meetings person.

        In any case, the problem it not you.

        The problem is that everyone else is waiting for you.

        So let your team know that stand-ups need to happen every day at 10am

        (Or at what ever time you choose. But pick a time and stick with it.)

        And make sure that it becomes everyone’s responsibility to call for standup.

        You need to get to a point that you KNOW the standup will happen

        whether or not you’re there.

        And I’d encourage you to test it out.

        Go into hiding just before 10am.

        Walk in at five past ten.

        If stand-up is in progress, join it. And at the end, congratulate the team for going ahead without you.

        If it isn’t in progress, ask how it went.

        You EXPECT to hear that is went ahead.

        You’ll be DISAPPOINTED to hear that it did not take place.

        If you can get stand ups to happen with this relentless regularity, you’ve already won half the battle.

        So much for the “WHEN?"

        Next time we’ll get into the “HOW?”:

        what to do once everyone is on their feet.

        Talk to you then.

9:
    slug: stand-up-you-are-doing-it-wrong
    title: "Stand-up: You're Doing It Wrong!"
    index: 9
    summary: I’m a big fan of the daily stand-up. But I’m not such a fan of the way that most stand-ups are run. There is a better way.
    date: 2015-10-28
    youtube_id: H02BlTXpcto
    image: episode9_333.png
    body: |-

        I’m a big fan of the daily stand-up. Even when they don’t work well, they work better than no stand-up at all.

        But I’m not such a fan of the way that most stand-ups are run.

        There is a better way.

        Enjoy the video.

    transcript: |-

        I’m a big fan of the daily stand-up.

        Even when they don’t work well, they work better than no stand-up at all.

        Having said that, the most common model for stand-up is, in my opinion,

        sub-optimal.

        There is a better way.

        Hi this is Gary, Welcome to Development that Pays.

        If your dev team does a daily stand-up, the chances are that it uses the “Yesterday, Today, Blockers” model:

        with each person taking their turn to talk about:

        What they worked on yesterday
        What they’re woking on today
        What - if anything - is impeding their progress - otherwise known as blockers

        It all seems very reasonable. And on the level of the individual, it is.

        But a stand-up is not an individual event. It’s a team event.

        Let’s run a quick stand-up using the yesterday-today-blockers model.

        The team gets up and forms a circle.

        Kevin starts

        He runs through what he did yesterday, what he plans to do today…

        and whether or not he has any blockers

        Fiona is next. She talks about what she did Yesterday, what she planing to do today

        Let’s freeze it right  there.

        Question: Who’s talking?

        Well, obviously it’s Fiona

        Who’s listening?

        Well, everyone else

        If only!

        Let’s give Dave, the Lead Developer,  the benefit of the doubt and say that he’s giving Fiona his full attention.

        Kevin has had his turn, to he might be listening.

        What about John? Well, he’s HIGHLY unlikely to be listening.

        He’s up next. Most of his attention is on working out what he’d going to say.

        The same - perhaps to a slightly lesser extent -  for Tim.

        You don’t need to have been in a stand-up to know that this is truth of this

        Ever been at a business event where people are invited to introduce themselves themselves around the table?

        Before it was your turn, were you paying attention

        or were your creating your story in your head?

        And did you breathe a sigh of relief after your’d taken your turn.

        And then - and only then - pay attention to what other people were saying?

        Come on, admit it. I won’t tell.

        Believe me, the same thing happens in Stand-ups. For exactly this same reasons:

        We want to make a good impression.
        We want to tell a good story.
        We do NOT want to embarrass ourselves.

        And all this without notes.

        This is not easy. It takes concentration. It takes your full attention.

        Let’s look at a different way of running stand-up.

        The team gets up and they start… not with Kevin… nor with any member of the team.

        No, the starting point is this ticket.

        Tim knows about it. He reports that testing is nearly complete.

        On to the next ticket, which is marked as blocked. Is it still blocked? Fiona reports that it is.

        On to this next ticket.

        Kevin knows about this one. He reports that he’d made some progress… and needs some help with one aspect of it. Dave offers to take a look immediately after stand-up.

        And so it goes on.

        This is called Walking the Board or Walking the wall.

        it takes the focus away from the individual and puts it where it should be: on the work.

        There’s no longer a need for anyone to use valuable brainpower to “come up with a good story”.

        The cards, in effect, provide the “agenda items" for the stand-up. And commenting on an agenda item is easy.

        This is just one advantage of the  Walking the Board model.

        We’ll take deeper dive into some of the other advantages in the next episode

        Talk to you then.


10:
    slug: walking-the-board
    title: Walking The Board
    index: 10
    summary: Hold on tight as we Walk the Board - side to side in 5 minutes or less
    date: 2015-11-04
    youtube_id: 316qdj10j9M
    image: episode10_333.png
    body: |-

        [Last time](http://www.developmentthatpays.com/posts/9-stand-up-you-are-doing-it-wrong), we looked at the
         most common stand-up model - Round Robin Yesterday/Today/Blockers - and compared and contrasted it with the "Walk the Board" model.

        ("Walk the Board" is also know as  "Walk the Wall", "Talk to the Card", and "Talk to the Work".)

        This time, we'll be Walking the Board - side to side in 5 minutes or less.

        There's a reference in the video to Episode 8, which can be found here: [Episode 8](http://www.developmentthatpays.com/posts/8-You-are-killing-the-daily-stand-up)

        Enjoy!

    transcript: |-

        Last time we looked at two ways of running stand-up:

        The round-robin yesterday-today-blockers model

        The Walking the Board model - otherwise known as Walking the Wall, Talking to the Card, Talking to the Work

        Today we’re going to be Walking the Board - end to end in 5 minutes or less

        Hi, this Gary. Welcome to Development That pays.

        Here’s the board we’re going to be walking.

        Today I’m going to lead stand-up.

        I’m not the scrum master, I’m not the lead developer… I’m just a Plain Old Developer.

        (If you watched Episode 8, you’ll know that I’m a big beliver in “sharing the love" when it comes to stand-up)

        I get things going by pointing to this card

        Why do we start at the top right?

        This is a whole discussion in itself… but I’ll give you two short answers for now

        The first is financial

        The items to the right of the board are closest to being live.

        Which means that they are the closest to providing value.

        (As you know, I’m very keen on the VALUE side of software development)

        If you’ve come across the concept of net present value,

        you’ll know that income now beats income later…

        and income tomorrow beats income next week.

        If you imagine a board where the features are of roughly equal value,

        then the items to the right of the board have highest net present value.

        It’s fitting then that we talk about them first.

        A second reason for starting at the right it purely practical:

        We’re going to moving the cards across the board from left to right.

        By starting at the right, we create space for the cards to move into

        Where were we?

        Oh yes, I’m standing at the board pointing at this card.

        It’s assigned to Development Dave - our fearless leader.

        He’s in charge of releasing this week.

        He says that this card, and indeed all of the cards in this column, will be released today.

        Excellent news.

        We’re done with the release column, so I move on and point to only card in the Test column.

        The card is assigned to Tim. He reports that he’s having trouble a bit of trouble with it.

        Kevin - the developer who did the work on the ticket  - asks what the problem is.

        Before we know it, Tim and Kevin are involved in a deep discussion about the card.

        Stand-up is not a place for deep discussions.

        The team comes to the rescue.

        One by one they raise an arm in the air.

        Tim and Kevin get the message… and agree to take the discussion offline.

        (In plain english, this means that they are going to have a chat about it after standup.)

        We’re done with the Test column, so over to the Development column.

        I point to the card here at the top

        Fiona is assigned to this one.

        She says that she finished it yeserday and it’s now ready for test.

        “Excellent", I say. And I move the ticket over to the Test column.

        I’m going to freeze it right there...

        Because something important just happened.

        Fiona completed the task yesterday, but she didn’t move the ticket on the board.

        Perhaps she forgot to move it.

        Perhaps she couldn’t be bothered to move it.

        But what if she didn’t move it on purpose?

        What if she wanted to wait until stand-up to move the card?

        How interesting.

        It’s actually quite satisfying to move a card across the board;

        And it’s easy to see that is could be even more satisfying to  move the card across the board in front of the entire  team.

        You might argue that the Board should be up to date at all times. that Fiona should have moved the card yesterday.

        But that would have robbed Fiona of her moment of glory.

        And that, in my opinion, would have been a mistake. I’m all for moments of glory.

        Next card is this one. It’s Dave’s. He reports that he’s just started, but so far it seems to be going well.

        Good enough for me.

        The next card is Kevin’s.

        More good news - he completed the work just before stand-up. He moves the card over to the Test column

        Hold on just one minute. He moved the card?!?

        Isn’t that supposed to me my job? After all, I’m leading stand-up today.

        Not at all.

        If moving a card is a moment of glory, then walking up ro the board and moving the card can only add to the experience.

        As the person running the standup., I’m happy to move the cards around.

        But I’m even happier if people come up to the board and move their own cards.

        There’s just one more card in the Development column. It’s is in this area to indicate that it’s blocked.

        I’ve got news of this one: the card was blocked pending the receipt of access details for an external api.

        I report that the access details have been received… so the ticket is no longer blocked.

        I take the card and move it to the active area of the column and assign it to myself.

        Want to know a little secret? I received the access details yesterday.

        I could have moved the card then.

        But you wouldn’t begrudge me my little moment of glory, would you?

        It’s almost time to bring stand-up to a close. Two more questions:

        Anyone looking for work?

        Both Fiona and Kevin are assigned a ticket from the backlog.

        (We’ll talk more about the process of selecting from the backlog another time.)

        Anyone have anything else?

        No? Excellent. We’re done for the day.

        That’s it, we’ve successfully walked the board from one side to the other.

        Along the way, we’ve had a couple of moments of glory - certainly not to underestimated -

        and the board is now bang up to date.

        Not only is the board up to date, but the team’s understanding of the current “shape" of the board is also up to date.

        Again, something not to be underestimated.

        Talk to you next time





11:
    slug: number-one-reason-training-fails
    title: The Number One Reason That Training Fails
    summary: "When we provide or receive training, we expect performance to improve. But is that a reasonable expectation? (Spoiler: No, it isn’t.)"
    date: 2015-11-11
    youtube_id: vD_mGFnpWZg
    body: |-

        When we provide or receive training, we expect performance to improve.

        But is that a reasonable expectation?

        No, it isn't.

        Unless the training is trivial, performance is *guaranteed* to go down in the short term.

        Enjoy the video.

    transcript: |-

        Have you ever had golf lessons? Or tennis lessons?

        If so, I have a question for you: Did your performance improve? Or did it get worse?

        Hi this is Gary, welcome to Development that Pays.

        Years ago, I read something about TRAINING, the truth of which hit me like a thunderbolt.

        I haven’t been able to find the original reference, but the gist of it was this:

        “Most training fails because… we expect an improvement in performance."

        Let me adjust this slightly:

        “Most training fails because… we expect an IMMEDIATE improvement in performance."

        Do you know this fellow?

        I know nothing about sport, but I understand this guy is handy with a stick.

        What if you met him in a bar and he told you - in strictest confidence -

        that he was unhappy with his performance…

        and was going to be working with someone ”re-invent" his swing.

        Would you bet on him to win his next tournament?

        I certainly wouldn’t.

        Rory’s swing is engrained. It’s a habit. It’s deep in his muscle memory.

        Shifting that habit to “install” a new swing is going to be hard work.

        It's not going to happen overnight.

        The thing is, Rory knows this. His manager knows this. His trainer knows this.

        They all know  the swing is going to get worse before it gets better.

        So much for the world of sport. What about the world of work?

        Dean is out of the office for two days on a course of some kind.

        Dean’s boss - let’s call him Mr Manager - is looking forward to Dean getting back.

        Wouldn’t you know it, it’s been a busy couple of days while he’s been away.

        Dean is back in on the Wednesday.

        Mr Manager is expecting great things from Dean

        Dean may also be expecting great things from himself.

        But things are about to unravel.

        Here’s a graph of Dean’s performance over time. The level of performance is more or less flat

        … up until the training course.

        His performance then DROPS as he attempts to break one habit and starts to install another.

        What we hope for for Dean is that he sticks with it long enough for his performance to “break through” his previous performance level.

        But it might be days or even weeks before he reaches this breakthrough point.

        Right now - at 11:30 on his first morning back:

        His expected performance is here
        His actual performance is way down here.

        He’s struggling under the weight of a huge a backlog of work.

        It’s not hard to predict what’s going to happen.

        The fastest way for Dean to close this gap is to go back to the way he did things before.

        The moment he decides to revert to the old way of doing things, that’s the moment when the training failed.


        Two things I think we can take from this:

        Number one: when you’re learning something new, be patient with yourself.

        Realise that your performance will get worse before it gets better.

        And number two: when you send someone else "to be trained”,

        realise that the you might be the one that makes the difference

        between training that succeeds and training that fails.

        As a minimum, give the person TIME to complete this journey.

        Ideally, provide support - dare I say it, COACHING - throughout the “danger zone”.

        Talk to you next time.


12:
    slug: tech-hiring-fail
    title: Tech Recruitment Fail - How To Consign Great Candidates To The Bin
    summary: Is your tech recruitment process eliminating the BEST candidates?
    date: 2015-11-18
    youtube_id: Wq05MtMWgCY
    body: |-

        A recruiter called me about a month ago. She said she had a great opportunity for me. And it did sound good:

        - A good match for my skills and background
        - A short commute
        - A good rate
        - A fairly well known organisation
        - A very interesting project

        Then she told me about the first step in the recruitment process...

        ... and I immediately ended the call.

        Find out what she said in this short video.

    transcript: |-

        There's an old joke about a hiring manager and a recruiter looking at a pile of 100 applications - all for a single vacancy.

        The manager says. "How are we going to get through this pile?"

        The recruiter without a word, gets up, picks up half the pile, and drops it straight into the bin.

        (That's how old the joke is: no shredding or recycling in those days!)

        The hiring manager is horrified.

        "What the hell or you doing? You might have thrown away the perfect candidate.?

        The recruiter doesn't miss a beat.

        "Your wouldn't have wanted an unlucky one, would you?"

        As a way of reducing a pile of applicants to a more manageable size, it's not subtle.

        But it's not totally dumb either: it at least has at least two benefits that I can think of

        it's requires very little effort

        and it's random:

        half of the good applicants - and half of the bad - end up in the bin.

        Of course, this is fantasy. We don't do random.

         We have a systematic process to reduce the pile.

        The best applicants never end up in the bin.

        Or do they?

        Hi, this is Gary. Welcome to Development That Pays.

        A recruiter called me about a month ago.

        She had a great contract opportunity for me.

        And actually, to be fair, it didn't sound half bad:

        Technology-wise, it was  a good match for my skills.

        The client has in offices in central London, which is good.

        Right on the District Line. Even better.

        And the day rate was... rather generous.

        She had my attention.

        She then told me the name of the company. I'd heard of them. Hardly a household name, but well-known in its niche.

        So a plus point. Not a strong plus point, but a plus point nonetheless.

        Then she told me more about the role. Turns out they're working on some really interest stuff.

        She'd got me on the hook.

        And then she says it:

        "The first stage is a technical test."

        "It shouldn't take you more than a couple of hours to complete."

        A couple of hours?!

        Not a chance. I thank her for getting in touch and I wish her well with her search.

        What just happened there?

        I've done technical tests before. And I've done one technical test since.

        Why did I say no on this particular occasion?

        To answer that, I want to show you a  graph of my "inclination-to-do-a-technical-test" plotted against time.

        The spiky-ness might make more sense if I overlay my employment history.

        Let's zoom in on one of the spikes

        When I'm in the middle of an assignment, my inclination to do a technical test for another assignment is...  low

        My inclination increases a little towards the end of the assignment...

        ... then takes off once it has come to an end.

        The longer I'm "between assignments",  the greater my inclination to do a technical test.

        But the moment I'm in a new assignment, my inclination drops way down.

        What I've drawn here isn't an absolute value: it flexes up and down.

        Call me about a really juicy role...  and it heads up.

        Call me about some dead-end job... and it heads on down.

        Let's take a look at this from the point of view of the hiring company

        using one of my favourite things in the world: a two by two matrix.

        Here are our candidates, sorted by Technical Ability and their inclination to do a technical test.

        If we ask all candidates to do a technical test.... we will successfully eliminate the candidates with low technical ability.

        So we can strike through these two boxes straight away.

        Everyone in the remaining two boxes will have the right technical level.

        So far so good.

        Annoyingly, everyone in this box.... has eliminated themselves.

        This includes candidates that:

        - have yet to be "sold" on your company or project

        - are happy doing what they are already doing.

        - and are confident in their own abilities - they know they can secure a role without having to do a two hour test.

        These are people that should have been on the shortlist.

        The baby has gone out with the bathwater.

        After everything I've said so far, you will be surprised to learn that I'm actually a fan of the technical test .

        But the important thing this is to use the right kind of test at the right stage in the recruitment process.

        Next time, I'm going to take you step by step through the process used by BBC Worldwide.

        The process uses not one but TWO technical tests..   and does so in a way that doesn't consign the bests candidates to the bin.

        Talk to you next time.

13:
    slug: tech-hiring-funnel
    title: Tech Hiring Funnel - As Seen At BBC Worldwide
    summary: Here's a technical recruitment process that doesn't scare off the best candidates
    date: 2015-11-25
    youtube_id: 7lCK2ZHr1J0
    body: |-

        Here's a Recruitment Funnel that does a great job of balancing efficiency and effectiveness:

        - *Efficiency* in minimising the workload for both parties
        - *Effectiveness* in getting the right person for the job.

        [Download the Tech Hire Funnel (pdf 2.4MB)](/files/DTP13-Tech-Hire-Funnel.pdf)

    transcript: |-

        Ever wondered how they hire technical "talent" at the Beeb?


        BBC Worldwide
        ---

        I was lucky enough to spend two years at BBC Worldwide

        - long enough to see a fair number of people go through the technical "recruitment funnel".

        (And of course I went through it once myself.)


        Now, I'm no expert in the area of recruitment.

        But it seems to me that the (BBC) process does a good job of balancing efficiency and effectiveness.

        - Efficiency in minimising the workload required by each side

        - Effectiveness in getting the right person for the job.


        The Funnel
        ----

        The first two steps are fairly standard:

        candidates are acquired from various sources, and filtered down.

        Next is the "Phone Tech 5" - more on that in a moment.

        The remaining candidates are then invited in for what will be (for most of them) a two step process:

         - first a face-to-face interview,

        - followed by the "Coding 45". (I'll get into detail about that in a  minute or two.)

        Then the offer and... with a bit of luck, the acceptance.

        The Funnel in Numbers
        ----

        To give you a idea of rough numbers:

        A hundred or more names might be fed in at the top.

        Filtered down to a dozen or so for the  "Phone Tech 5".

        Five of those would be invited for the face to face interview.

        And maybe three of those would go on to the  "Coding 45"

        And then one would be offered the role.


        Let's put a little bit of detail onto the two strangely named items in the process, starting with the Phone Tech 5.

        "Phone Tech 5"
        ---

        Here's how it works:

        The lead developer gets on the phone and goes through a list of FIVE technical questions with the candidate.

        By the end of the call - which typically lasts less than 10 minutes - each side is better informed:

        - The Lead Dev has some feeling for the  candidate's technical level. (Enough to decide whether to bring her in for interview.)
        - And the candidate has a better idea of the technical areas that are key to the role.

        For the Phone Tech 5 to work well, the questions should:

        - Reflect the the technical areas required by the role, and
        - Require responses that more than one word.... but less than War and Peace.


        "Coding 45"
        ---

        Moving on to the "Coding 45".

        This is one that I can talk about with some authority - I ran a fair few of these during my time at the Beeb.

        "Coding 45" is a time-limited (45 minute) pair-programming test.

        I'd set it up by saying that I'd be playing the role of an indecisive Product Owner:

        I'll be asking for something... then asking for something to be modified... and I'd probably be doing that rather a lot.

        The keys to success are:

        - Starting with something very, very easy. Then increasing the level of difficulty one step at a time

        - Getting the person to talk about their coding decisions.

        - Providing help and assistance as appropriate. After all, it's an exercise, it's not supposed to be a torture session.

        There's another key - something that I stumbled on completely by accident.

        The very first time I was asked to run the Coding 45, I made a mess of booking a conference room.

        I had no choice but run the session at my workstation.

        When the session was over, I realised that I'd been concentrating so hard on "running the process" that I hadn't formed an opinion about whether to hire this person.

        I was still wrestling with the thought when I passed a colleague in the corridor.

        "Well, that seemed like hard work"  he said.

        "What do you mean?" I asked.

        "That guy you had in. Bit like pulling teeth, wasn't it?"

        How interesting.

        I hadn't been able to form an opinion, but those around me had formed an opinion easily.

        From that point, we made it a REQUIREMENT to run the Coding 45 at at our desks. And to make sure to gather feedback from the entire team at the end.


        Free download
        ---

        If you'd like a copy of the funnel, - which includes example questions for the "Phone Tech 5" and the "Coding 45:

        you'll find a downloadable version of the "Development That Pays" [on this page].

        Talk to you next time.

14:
    slug: scrum-vs-kanban-part-one
    title: 'Scrum vs. Kanban Part I: "You Talk about Work. We Do Work"'
    summary: What happens when an Agile Team splits in two, with one sticking to Scrum, and one moving to Kanban?
    date: 2015-12-02
    youtube_id: 9Jgu1BlTlSc
    body: |-

        In this video (and the next one or two) we're going to follow the fortunes of an Agile Team that split in two:

        - One team continued as before - with *Scrum*
        - The other team dropped Scrum in favour of *Kanban*

        Will it all end in tears?

    transcript: |-

        This is a story of Two Agile Teams.

        More correctly, it’s the tale of one Agile Team that split into two Agile Teams.

        What makes the story interesting is that it was more than just an organisational separation.

        It was an Agile separation.


        A New Team
        ---------


        I joined a team in 2012

        It was, I was told, a team that “did Agile”.

        At the time, I knew very little about “Agile”.

        But I could see from the get go  that they weren’t doing it by halves.

        There’d clearly been lots of training. They had all kinds of  tools. They were doing all kinds of “rituals”.

        We’ll get into the specifics of how the team worked in a minute.

        The Split
        -----

        Fast forward a year and the company went through a fairly major reorganisation.

        My team was split in two.

        Although reporting lines changed, the seating plan didn’t.

        There was one outward indication of change: where there had been one agile board, there was now two.

        Oh, and we did two stand-ups every day , ours at 10:00am, theirs at 10:15.


        A New Flavour
        -----

        Ever-observant, it took me a couple of weeks to notice that the other team was doing a different “flavour” of Agile.

        I hadn’t realised that there was more than one flavour of Agile.

        What my team was doing was, called  Scrum. The other team was doing something called Kanban.

        “Kanban”. Really? This was a word I knew from way back.

        But I knew it in the context of manufacturing.

        I couldn’t immediately see how it applied to the process used by my (former) teammates.

        So I asked the Lead Developer of “Team Kanban”:

        “What the difference between Scrum and Kanban?”

        He was ready with an immediate answer:

        “You Guys Talk About Work. We Do Work”.

        Ouch!

        in that moment, I learned an important lesson about Agile:

        It can be an emotive issue. Beliefs can be deep-seated.

        the Team Kanban Lead Dev clearly thought that Kanban was better than Scrum.

        I held… the opposite view.

        My view was both strongly held… and completely without evidential foundation.

        I’m a little older now. And, I hope, a little wiser.


        Natural Experiment
        ----

        I can now see that the team split was a perfect natural experiment, along the lines of:

        “Take two identical twins. Separate them at birth. Feed one Scrum. Feed the other Kanban. Observe the result.”

        So I hope you’ll join me on a little forensic investigation

        It’s going to take more than one episode to do it. But in this episode, we have juat enough tom to take a 20,000 feet view of the two teams and their processes.


        Team Scrum
        -----

        Team Scrum worked on two week Sprints.

        On the Monday, we’d take ourselves off to a quiet part of the building for a Sprint Planning session.

        The Product Owner would select items from the backlog, we’d play “Planning Poker” to estimate the size each item.

        And we’d continue until we had roughly one  “sprint’s worth” of cards.

        Sprint planning over, each developer would pick up a card and set to work

        Every morning there’d be a stand-up  - 10 am on the dot.

        And so it would go on day after day, with the cards gradually making their way across the board.

        By the about the Tuesday of the second week, we’d expect all of the cards have moved at least one step.

        It’s then a  race - a sprint - to get everything tested and ready for release by Friday.

        We didn’t always succeed in getting everything across the board. Any item that failed to make it  would be “recycled” into the next Sprint.

        On the Friday morning, everything in the release column would be packaged and made ready for release.

        One last thing to round out the Sprint: a Retrospective.

        A chance for the team to get together… to reflect on what well, to discuss what could be improved… and to commit to one or two action items for the following sprint.


        Team Scrum - Evidence
        ----

        Let’s take stock of the evidence we’ve gathered so far:

        There’s a Product Backlog
        The Agile Board
        And a Done Pile.

        There’s a Two week Sprint with a sprint planning session at the beginning.
        Each day after that, a Daily Scrum Meeting. (aka a Stand-up)

        At the end of the process, all those cards that have made it to the final column are packaged ready for release

        And on the afternoon of the last day of the sprint, A Retrospective


        Team Kanban
        -----

        Moving on to Team Kanban.

        As with Team Scrum, there’s a Backlog, an Agile Board - they called it a Kanban board - and a “Done Pile”.

        But theres no sprint: instead of a group of cards making their way across the board in a specific time period, cards flow across the board continuously.

        With no specific release day, it’s up to the team to decide when to package for a release. they’d typically wait for a fairly significant feature to be be finished and tested before packaging.

        In practice that meant releasing once or twice a week - around 2 to 3 times more frequently than team Agile.


        Team Kanban - Evidence
        ------

        Taking stock of the evidence:

        There’s a Product Backlog
        A Kanban Board
        And a Done Pile.

        No Sprint. No Sprint Planning. No two week period. No Retrospective.

        There is a daily stand-up.

        And they are packaging and releasing. And doing so 2 to 3 times more frequently than Team Scrum.


        Wrap-up
        ----

        It’s interesting data, but it’s too soon to draw any firm conclusions.

        We’ll collect more evidence next time. Talk to you then.


15:
    slug: scrum-vs-kanban-part-two
    title: "Scrum vs. Kanban Part II: Kanban Kaos"
    summary: Team Kanban seem to working efficiently. But are they working effectively?
    date: 2015-12-09
    youtube_id: n2ZrUQNwrUk
    body: |-

        Team Kanban seem to have the upper hand: they are working more development hours, and are
        releasing 2 to 3 times more often than Team Scrum.

        But is Team Kanban performing well?

        In the move from Scrum to Kanban, a few things were... lost in translation.

    transcript: |-


        Last time, I told the tale of an Scrum team that split into two.

        One team continued with the Scrum.

        The other team abandoned Scrum in favour of Kanban.

        (If you missed the last episode, I'd encourage you to check it out. There should be a link somewhere around this video.)

        Did Team Kanban set the world on fire. Or did it crash and burn?


        Taking notes
        ---------

        We learned a few interesting from our 20,000 foot view of the two teams.

        As good forensic investigators, we should take a few of notes:

        We know that Team Scrum works in two week sprints. Team Kanban works in a continuous fashion.

        Team Scrum has a formal *Sprint Planning* session.

        Team Kanban must have some process to choose items from the backlog... but we don't have any details.

        Team Scrum does *Retrospectives*. We're not sure if Team Kanban has anything similar.

        Between Sprint Planning and the Retrospective, team scrum loses around half a day of development time a fortnight.

        The two week period doesn't mean anything to Team Kanban, so let's convert the number of days into percentages.

        One last piece of data to record:

        Team Scrum releases once every two weeks; Team Kanban releases 2 to 3 times in the same period.

        Q&A
        --

        I had a couple of great questions come in after the last video - both of them relating to Team Scrum.

        "Why is your Scrum Sprint length 2 weeks?"

        (The sense of the question being why was the sprint length as long 2 weeks.)

        I can tell you that from the team felt they were "cutting edge" for having a Sprint of just two weeks.
        At the time, sprits of 3 or 4 weeks were not uncommon.

        Any suggestion of moving to a one week sprint would have been strenuously resisted,
        because it would have meant doubling the frequency of the the two things we hated most:

        * sprint planning, and
        * packaging for release

        Which leads on nicely to the second question...

        "Why does your Scrum Team wait for 2 weeks before releasing software?"

        This is such a great question.

        I say that, because it's a question that would have never occurred to Team Scrum.

        For us, a Sprint was something that started with Sprint Planning and ended with a Release.

        The Release was part of the very definition of Scrum!

        How's that for a limiting belief!


        Is Team Kanban Effective?
        ----

        Looking at the two lists, it's clear that Team Kanban is doing more work.

        It's also releasing more often.

        But is it  performing are well as the evidence suggests?

        No photographs from the time have survived, but we have been able to piece together a couple of images from eye witness accounts.

        Exhibit 1 is Team Scrum's board.

        Nothing out of the ordinary here. Given the position of the cards, I'd guess we're looking at the state of the board from somewhere close to the  end of a sprint.

        Exhibit 2 is Team Kanban's board.

        Blimey. A bit crowded, it's it?

        And if I zoom out a little bit... there.

        Have you ever seen anything like it?

        Your eyes don't deceive you: the column of cards goes all the way to the floor.

        (And it's not that we've caught it on a bad day. the board looked like this for at least a year.)

        If I tell you that Team Kanban had four developers, you'll start to get an idea of the scale of the problem.

        There must be 20 cards in this column.

        Even if we assume that half of them are blocked, it still means that each developer is working on multiple tickets at the same time - never a good thing.


        Kanban Fail
        ----

        What's gone wrong here?

        Team Kanban are missing two things that are essential to the success of an Agile team:

        1. An effective transition from Backlog to Development
        2. A hard limit on Work in Progress.- the number of items bing worked on at any one time

        With so many blocked cards on the board, it's clear that they are not doing a good job of transitioning from
        backlog to development.

        And it looks like they're on a quest to *maximise* their Work In Progress!


        Natural Consequence
        ----

        Team Scrum, on the other hand, are doing a good job in both areas. Not because they have a
        particular focus on these areas:

        It just that more on a natural consequence of the principles and practice of Scrum:

        An effective transition from Backlog to Development is a natural consequence of  Sprint Planning.

        An item is taken from the backlog and the team estimates its size (i.e. the time taken to complete it). There'll be discussion between the Product Owner and the dev team.

        Both will have a better understanding of what's required and what's involved. This increases the chances of the item getting across the board without being blocked.

        Minimal work in progress is an natural consequence of the Sprint itself:

        By having maximum of "one sprint's worth" of cards on the board, the WIP doesn't have the opportunity to grow.


        Conclusion?
        ----

        If there's a conclusion to be drawn, it's this: Scrum done well beats Kanban done badly.

        Which begs the question: what about Kanban done well?

        One of our teams is about to have its world turned upside down.  I'll tell you all about that in the next episode.


13:
    slug: scrum-vs-kanban-part-three
    title: "Scrum vs. Kanban Part III: Kanban FTW"
    summary: How will Team Scrum cope with the loss of their fearless leader?
    date: 2015-12-09
    youtube_id: sOlFPi5xJqQ
    body: |-

        Team Scrum are in for a shock. How will they cope with the loss of their much-loved Project Manager
         / Scrum Master / All round superstar?

        And who is the mysterious "Agile One"?


    transcript: |-




        Previously on Development that Pays...
        ---

        I joined a new team.

        It was a team that “did Agile”. It was doing all the rituals. It had all the artefacts.

        There was a reorganisation.

        The Team Split in two.

        One team stuck with Scrum…  (working in two week sprints)

        One Team moved to Kanban (working in a continuous fashion)


        Team Kanban thought they were the hot stuff…

        … but its board told a different story.

        Then one day, our Project Manager come Scrum Master come all round superstar, resigned.


        Back to the story
        --

        Hi, this is Gary,

        Welcome to development that pays.

        And welcome back to the concluding part of our Trilogy.

        If you missed [Parts one](http://www.developmentthatpays.com/posts/14-scrum-vs-kanban-part-one) and
         [two](http://www.developmentthatpays.com/posts/15-scrum-vs-kanban-part-two) and you'd like to catch up,
         there should be links in or around this video.


         A New Hope
         ----

        It was a dark time for Team Scrum.

        We'd just lost our awesome project manager.

        News came in that an external "Agile Coach" was going to be “parachuted in”. 

        Someone looked him up online. 

        - Very high profile.

        - Very expensive, we guessed.

        And very, very… KANBAN.

        As I said back in [Part I](http://www.developmentthatpays.com/posts/14-scrum-vs-kanban-part-one), people
        who “do Agile” often have strongly held views about how things should be done.

        And our ongoing grudge match with Team Kanban had only served to entrench our view that Scrum was awesome and Kanban was rubbish.

        So we were ready for him. We’d expected him to be pushy and directive. And we intended to push back. Hard.

        As it turned out our new Coach - let’s call him **The Agile One** - was neither pushy nor directive. 


        Lesson One
        ----

        At our first meeting he said that he had a new (Agile) board that he’d like us to try.

        But only if we wanted to to.

        He unrolled the A2 paper that he’s brought with him. 

        The key to it, he, explained, it that each column is just wide enough for a single post-it note. And high enough for just five. That's it.

        “This is important. By limiting the number of cards in each column, we make sure that things get across the board as quickly as possible.”

        A couple of team members raised concern whether a post it would stick long enough,… and whether it might be necessary to bring some BluTak into play. 

        I smiled to myself. If our “resistance” centred around the relative adhesive properties of Postits and BluTak, *The Agile One* had already won.

        And so our Kanban journey began.

        The paper board - together with our winning combination of postits AND bluTak - taught us to to keep our work in progress under control.

        We had learned our first lesson.

        Lesson Two
        ---

        At the time of his arrival, a number of cards on the board were blocked. 

        *The Agile One* asked about one of them.

        "We're waiting for so-and-s0 to get back to us” I said.

        Superstar Agile Coach would say: “What can we do to move that along?”

        I’d say: “ I’ll email him today”.

        WRONG ANSWER!

        Where’s his office?

        In the next building. 

        "Let's go and talk to him."

        “When?"

        "Right now”

        And off we walked off together. 

        And we found the person. And we had a relaxed conversation. *The Agile One* asked questions.
         And what was blocked became unblocked. Effortlessly.

        None of us could match *The Agile One*’s ability to make problems disappear, but we did - in time - learn the value of talking to people face to face to get issues unblocked. And - in the case of new cards - to make sure that they didn’t get blocked in the first place. 

        That was our second lesson.

        Lesson Three
        -----

        One morning, *The Agile One* brought a guest to stand-up. It transpired that *The Agile One* was moving on to bigger and better things. The new person was his replacement.

        If *The Agile One* was a little bit Obi Wan Kenobi, the new guy was more Yoda: a little bit annoying, and very into "basic training”.

        Where the teaching of *The Agile One* had been effortless, with the **New Guy** it was more the school of hard knocks. 

        "Release more often, you must”. (He didn’t really talk like that.)

        We explained that it was a painful process, very time consuming and prone to error.

        The *New Guy* let us kknow that it was his belief that if you're not good at something, you should do it more often.

        The last thing we wanted to hear. And the first thing we needed to know. 

        We elevated packaging for release to an art form. 

        Eventually, we were releasing more often that any other team in the company. AND doing so with the lowest failure rate in the company.

        We had learned out third lesson well.


        Epilogue
        ---


        The Scrum Team that I joined in 2012 was the best performing team I’d ever worked in.

        On a scale of 1 to 10, I’d give it a 7 for performance.

        On the same scale, other teams I’d worked with would score a 5 at most. 

        When Team Scrum split into two and Team Kanban was born, the members of Team Kanban thought they’d moved ahead.

        True, they were releasing more often. But their Work In Progress was out of control.

        They score a 6.

        Thanks to Obi Wan and Yoda, Team Scrum went from High Performing Scrum Team to VERY high performing Kanban Team. It was performing at level 8 within a month and at 9 within three.

        I’ve yet to experience a 10.

        This is the last Episode of Development that Pays for 2015. I'll be back with a brand new episode on Wednesday 6th January 2016.

        Happy Holidays
        ---

        May I take this opportunity to wish you and yours a very Happy Christmas.

        Talk to you in 2016.


17:
    slug: superstar-coder
    title: Do You Need A Superstar Coder?
    summary: There are some very talented coders out there. Should you get one?
    date: 2016-01-06
    youtube_id: mFtocDZEJUo
    body: |-

        [The Advent of Code](http://adventofcode.com/) is a series of 25 coding tests. I managed to battle my way
        through them, but I didn't break any speed records. (Unless, of course, they're handing out awards for slowness.)

        I was surprised by how many people took part in the challenge (at the time of writing 25,000+ people have started
        the test, and 1,400+ people have completed it.

        I was also surprised - and humbled - to see how quickly some of the challenges were solved. Clearly, there are some
        very talented coders out there.

        Which begs the question: should you hire one?

    transcript: |-


        Just before Xmas, I stumbled upon rather wonderful called the [Advent of Code](http://adventofcode.com/) -
        it's an advent calendar of 25 coding challenges.

        I'm in the process of learning a new  programming language -  Go (also known as Golang) - so the
        *Advent of Code* was a perfect opportunity to test out my new skills.

        So far - I'm on Day 22 out of 25 - none of the challenges have beaten me.  But some of them took me a heck of a long time to crack.

        The *Advent of Code* has a leaderboard. I discovered to my horror that one of the challenges had been cracked in a mere 17 minutes.

        There are clearly some very talented coders out there.

        Which got me thinking. How good does a coder need to be?


        My coder rating
        ---

        Hi this is Gary. Welcome to Development that Pays.

        When I first started developing websites, I worked on my own for several years.

        I then went to be work as part of a team of developers. And to be honest, it was a bit of a shock to the system.

        The team was working on a API for a fairly major eCommerce website - it was a big step up from what I'd been doing.

        At that time, in that team,  I just wasn't good enough.

        The second team was a different story:

        By complete fluke,  they needed something that I'd already built.

        At THAT time in THAT team I was more than good enough.

        As it's  turned out, these two teams have defined my low and high water marks:

        In every project since, as a coder  I've been good enough - (or I've become good enough...)

        But I've never been the best coder in a team.

        Overall, then, I'll give myself a Coder Score of... distinctly average.


        Enter the Superstar Coder
        ---

        Let's say, for the sake of argument, that I'm removed from a team and an ace Coder is parachuted in to take my place.

        What would be different?

        Well... certainly the coding part of the job would get done faster. No doubt about it.

        But it's important to realise that coding is just one part of what a developer does.

        (You'll notice now that I've been very careful to use the word "Coder" up until this point.)


        Coder vs. Developer
        ---

        The wider job of "Developer" includes all kinds that go beyond just writing code. Things like: understanding
        business requirements; designing solutions; writing tests; and many many other things besides.

        And that's just talking about the Developer as an individual operator.

        There's also the team to consider. How does the person work within the team? Are they able to work well
         within an Agile environment (if indeed it is an Agile environment)?


         Levers
         ----

        Here's the thing: the ability of an individual developer to write code is certainly a lever. But it's a relatively short lever.

        The ability of the individual developer to solve problems - all the way from business requirements,
        through development into release ...  is a longer lever.

        The ability of team to work together to produce software is a longer lever still.

        And the ability of an development team to work together with a Product Owner  - together with the full support
         of the Business Owner - to  deliver business benefit,  is perhaps the longest lever of all.

        Talk to you next time.



18:
    slug: the-trials-of-software-development
    title: The Trials of Software Development
    summary: My friends and I spent a year preparing for a competition. We made a big mistake.
    date: 2016-01-13
    youtube_id: uusvkb15_q4
    body: |-

        As a teenager, I was mad keen on motorbikes. By the age of 14, a group of us had trials bikes, and we
        set about preparing for our first competition.

        Nearly a year later, we entered our first event. Only then did we realise our big mistake.

    transcript: |-

        Teenage Kicks
        -----

        When I was a teenager, I was mad on motorbikes. There was a group of us that were into "trials" -
        that's the version where you have to keep your feet off the ground.

        Our hero was Sammy Miller.

        Our bible was "Clean to the Finish".

        Our favourite tv programme was Kick Start

        By the age of 13 three of us had trials bikes. We intended to compete, but we knew we weren't ready.

        So every weekend, we'd "train"  by marking out courses - known as "sections" - and challenging ourselves to ride up a stream here or over a log there.

        Dumpy Brown
        -----

        Occasionally, we’d see another kid with a trials bike. Dumpy Brown.

        He was a couple of years younger than us. 11 maybe. He was - as his rather cruel nickname suggests - a little overweight.

        It seemed to us that his dad was the one who liked motorbikes. Mr Brown the younger always seemed reluctant to get on his bike.

        Once on, his dad would point him at a log - or a rock - or a stream - and tell him to go for it. And he'd fall off. Every time.

        The tireless Mr Brown the Elder would pick up the bike, pop his son back on the bike. Rinse and repeat.


        Preparation, preparation, preparation
        ----

        The months went by. We hadn't see the Browns some time. Perhaps they'd given it up as a bad job?

        Eventually, we felt ready to enter a real competition.

        It did NOT go well.


        Learn by DOING
        -----

        If I could go back and talk to my 14 year old self, I'd tell him two things.

        1. Stop calling that boy "Dumpy Brown". It's cruel.
        1. Enter a competition. *Today*. Not in eight months time.

        My friends and I had read the books - and we'd watched the TV show,

        there were 100 things we didn't know about a real competition.

        Thing we would ONLY learn by entering.

        The training that we'd created for ourselves turned out to be worthless.

        The training provided by a real competition - priceless.

        A common "cycle"
        -----

        I've seen the same story play out in software development:

        Weeks spent on design... for something that turned out to be impossible to build.

        Weeks spent on development... for something that turned out to be impossible to deploy.

        Weeks spent on building and releasing... for something that the customer didn't want.

        What we need to do for our projects is what Dumpy Brown's dad did for him:

        * Put him on a motorbike... before he was completely ready
        * Point him at a stream... before he was completely ready
        * Enter him for a competition... before he was completely ready

        Karma?
        -----

        My friends and I didn't make a big impact on the world of trials. I scraped a low ranking award on one lucky occasion. My mates didn't do much better.

        Dumpy Brown? County Champion.





19:
    slug: how-to-spot-a-sick-agile-board
    title: How to Spot a Sick Agile Board At Twenty Paces
    summary: Can you tell if your Agile team is in trouble - just by looking at the Agile Board? From a distance?
    date: 2016-01-20
    youtube_id: CmU-g2hRO24
    body: |-

        Can you tell if your Agile team is in trouble - just by looking at the Agile Board?

        From a distance?

        While a healthy-looking board is no guarantee of a healthy and productive team...

        ... a sick-looking board can be strong indicator that something is wrong.

        In this video, we'll look at a couple of healthy boards - one Scrum, one Kanban. We'll then go on to look at some *absolute stinkers*.


        Seen better/worse?
        ----

        If you've spotted stinker of a board "in the wild", I'd *love* to hear about it.

    transcript: |-


        This is you.

        This is your glass-walled office.

        From the comfort of your executive chair you can see your Dev team's Agile board.

        Question: without getting up and with no other information, can you tell if the project is in trouble?


        It's staring you in the face
        -----

        Not too long ago, I worked at a start-up. It was one of the most high pressure environments I've ever worked in.

        One things that added to the DISPLEASURE of working there was that the Dev Team was required to provide daily status updates.

        (This was in addition to daily stand-ups.)

        To cut a long story short, we all hated doing it.

        I remember thinking to myself

        "The bosses only need to look at the state of our Agile board to see what trouble we're in".

        I've since became a collector of dodgy-looking Agile boards. And I'd love your help to add to my the collection.

        More on that at the end.


        Healthy
        ----

        First things first. let's remind ourselves what a healthy board looks like.

        Starting with a Scrum board.

        As we've seen before, Scrum starts by selecting a Spirit's worth of tasks...

        And then getting to work.

        The cards flow across the board.

        And by the end of the sprint , most - if not all - of the cards should have made it from one side to the other.

        Ready to be released.

        The process then repeats, with a new set of tasks being selected firm the backlog.

        A Kanban board has a different shape.

        it doesn't have the  "periodic" property of the Scrum board: cards move across the board in a more or less continuous fashion.


        Snapshots
        ----

        When we go spotting Agile boards in the wild, we won't be able to see them in motion. So let's just check that we can identify snapshots.

        First of all: Scrum or Kanban?

        Well, the cards are quite evenly spread, so it's likely to be a Kanban board.

        There are not too many cards on the board, so the work in progress (WIP) here is nice and low.
        I'd be happy to give this board a clean bill of health.

        What about this one.

        Most of the cards are to the left, so it's most likely that we're looking at a Scrum board - and we're looking at the early stages of a sprint.

        (If it's a Kanban team - or if it's a Scrum team in the late stages of a sprint - then something is very wrong.)

        As before, not too many cards on the board, and not too many cards in one column. So again, I'd give this one a clean bill of health.

        Now that we're warmed up, let's have a look at come stinkers.


        Stinker No. 1 - Problems Developing
        -----

        We've come across this one in an earlier episode.

        Not sure we can say much about Test or Release, but there's something very wrong with the Dev column.

        I suppose it's possible that this team has 20+ developers...

        - but if they do, why are 20+ developers working in the in the same Agile team?

        It's likely that many of the cards in this column are blocked,

        which is a symptom of starting development work on a task too early.

        This team might benefit from a bit more design work, before they dive into Dev.

        Let's move on.


        Stinker No. 2 - Testing Times
        -----

        In this case, it looks like the dev team has been playing a blinder,

        with the result that things are piling up in  the Test column.


        Now, I wouldn't say this was a project team in trouble, but  what I'd like to see happen at this point is that the Devs would STOP developing and START lending a hand with some testing.

        (Your devs aren't too "big" to test. Are they?)

        Let's move on again.


        Stinker No. 3 - Please Release Me
        -----

        Here we have a project team that's having all kinds of problems getting things released.

        Possible causes?

        Perhaps Release is the hands of an over-zealous systems admin, who's not willing to share his keys.

        Or it might just be that we've caught this board at a bad time.

        I know that there are  companies that have have release freezes at certain times of the year (for example, Xmas).

        It might be that if we saw this board again in a coouple of weeks, the whole thing might be looking more healthy.


        Stinker No. 3 - The Turkey
        -----

        What about this one?

        I call this one the turkey, because it's absolutely stuffed.

        I think we can assume it's a Kansan board: there's no evidence of any ebb and flow that we would expect to see on a Scrum board.

        There's so much I could say about this board, but let's keep it really simple:

        there's far too much work in progress, there'll be context switching happening all over the place. Work is moving through this system at a crawl.

        Basically... there's just no agile left.


        Help me build my collection
        ----

        As I mentioned earlier, I'd love to add to my collection of dodgy Agile boards....

        ... and for that I need your help.

        Have you spotted a board in the "wild" that absolutely stopped you in your tracks? If so I'd love to hear about it.

        And If you could share a picture of it that would be even better.

        Thanks in advance for you help, and I look forward to talking with you next time.


20:
    slug: i-am-blocked
    title: "Sh!t Software Developers Say: \"I'm Blocked!\""
    summary: If a Developer tells you that he or she is locked... Should you believe them?
    date: 2016-01-27
    youtube_id: 60814lXx0nQ
    body: |-

        Software Development is hard. Unpredictable. There are problems around every corner.

        So here's the thing. If a Developer tells you that he or she is **blocked**...

        Should you believe them?


    transcript: |-



        Software Development is hard. Unpredictable. There are problems around every corner.

        So here's the thing. If a dev tells you that he or she is blocked...

        Should you believe them?


        "I'm blocked"
        ----

        I'm a software developer. I've said the words "I'm blocked" many times.

        I never lied. But I wasn't always correct.


        Sportlobster
        ----

        Sportlobster is a sports social network.

        Like most online businesses these days, it's available on several platforms,

        Meaning that there's:

        - a website
        - an iOS / iPhone app
        - and an Android app.

        Now, all three platforms do much the same thing, so Sports Lobster was smart enough to
        centralise this functionality into an API.


        One of the new features that was added during my time at Sports Lobster was the ability to let people log
        in using their Facebook account.

        As with every new feature at this particular time, it was super urgent.

        For that reason, all four teams were give the task on the same day.

        For My team - the API team - the task was clear. We jumped straight in.

        Three remaining teams immediately declared themselves blocked.

        They took it upon themselves to pass our desks at regular intervals to ask how things were going and when we expected to be finished.

        This was not helpful.

        As I recall it took three or four days to get the Facebook login feature developed and tested.

        Then, and only then, did the web, iPhone and Android teams set to work.


        Rewind
        ----

        Let's rewind this.

        "... remaining teams declared themselves blocked."

        Not one of us questioned this at the time.

        But the truth is that none of these teams were truly blocked.

        All of them could have started work.

        Let me explain why:

        The sign in with Facebook functionality requires the API to do some complex stuff - including all of
         the necessary interactions with Facebook itself.

        But all of the work it does boils down to this:

        it needs to *RECEIVE* a request. And it needs to send back a *RESPONSE*.

        That's about it.

        Oh, and the response can can be either *YES* or *NO*.

        Hardly *rocket science*, is it?

        Missed opportunity
        -----

        If we web team had something that did just this - something that would receive a request and respond with
          yes or no - , it would be able to start work immediately.

        Same goes of for the iOS and Android teams.

        Each of the teams was capable of building such a thing. But it didn't occur to them.

        Embarrassingly, it didn't occur to the API team either.

        We were the team that best-placed to build it. We could have quickly built something that all three teams could have used.

        A couple of hours work, and all FOUR teams would have been hard at work. The new feature could have been released days earlier.

        Mocking
        ---

        This general approach - to create a "fake" version of all or part of an external system - is known as  mocking. It can be a powerful antidote to "being blocked"

        Talk to you next time.




21:
    slug: multitasking-is-evil
    title: Three Good Reasons To Work On ONE Thing At A Time
    summary: Is working on more than one thing at a time really such a problem?
    date: 2016-02-03
    youtube_id: CgbM4c8GJa8
    body: |-

        I seem to be hard-wired to *try* to work on more than one thing at a time.

        It's one of the reasons I like to work in a **Scrum** or **Kanban** fashion - I'm *forced* to work on **one thing at a time**.

        But is working on more that one thing at a time really such a big deal?

    transcript: |-

        I seem to be hard-wired to try to work on more than one thing at a time.

        It's one of the reasons I like to work in a Scrum of Kanban fashion - I'm forced to work on one thing at a I time.

        But is working on one thing at a time really such a big deal?


        You have two jobs
        -----

        Let's set this up.

        You have two things to do. Each requires five day's work.

        You have two choices basic choices.

        You can work on both tasks together. Or you can pick one, work on it until completion... then start on the other task.

        Let's get a little more scientific and add some numbers.

        Each task  requires FIVE day's work.

        Each block here represents half a day - 10 blocks in total for each task.

        For the concurrent let's say that you work on one task in the morning, and the other task in the afternoon.

        For the sequential case, we'll work on task A for 5 days, then on task B for 5 days.

        Those are our two basic cases.

        What's the same?
        ---

        The first thing we can say is that - one way or the other - you have completed two tasks in 10 days.

        That's what's the same.

        The are THREE ways that the two approaches differ - and I'd be surprised if you've thought of all of them:


        1. Financial
        ----

        Let's attach some value to the work you're doing. Each of the task provides you with income of one thousand pounds.

        Which means you get  £2000 at the end.

        Or  £1000 here and here.

        These are very different financial positions.

        While you're working , you're likely to be spending money. Your working capital declines for 10 days, then gets topped up at the end.

        Compare that with the sequential case. That's half the working capital.


        2. Discovery and learning
        ----

        It sounds a little counter-intuitive, but working on two tasks together limits the opportunities for one to benefit from the experience of doing the other.

        But if you take Task A and work on it until completion, EVERYTHING that you learned from the experience can be carried over to task B.

        In the extreme case, you may discover that Task B is no longer required.


        3. Context Switching
        ----

        So far, we've been looking at an idealised case, where a 5 day task takes 5 days.

        I'm going to come right out and say it: I can't do a 5 day task in days.

        That's because it take me  while to get warmed up. To get going.

        Truth be told, it takes me a while to get going every day.


        But what if I'm working on two tasks?

        Every day, I'm coming back to a task that I haven't worked on for a significant period of time.

        Worse, my mind has been occupied with something entirely different.

        It's going to take a while to work out where I'd got to... and to get going again.

        Adding in all the time for these "context switches"

        we can see that under real world conditions, it takes less time to work on one task at a time that to work on two tasks concurrently.


        Chime in
        ---

        Those are three reasons to work on one task at a time.

        Do YOU have any others?

        Or perhaps you have a good reason to work on two or more task at the same time.

        Either way, let me know in the comments.




22:
    slug: were-going-to-need-more-tests
    title: "Sh!t Software Developers Say: \"We're Going To Need More Tests\""
    summary: Is it always a good thing to stop developing and start writing tests?
    date: 2016-02-10
    youtube_id: jrus212djPs
    body: |-


        It's happened to me twice now:

        1. Team falls foul of nasty bug
        2. Team spends frustrating week tracking it down
        3. Team calls timeout: "We're Going to Need More Tests"

        In one case, the team was given permission to take a fortnight to stop development and write tests.

        In the other case, permission was refused.

        In both cases, the decision was... **WRONG!**

        Enjoy the video.



    transcript: |-

        Your Software Development Team has had a rough time of it.

        They've spent the best part of a week tracking down a **nasty bug**.

        And now they are feeling exposed.

        They want to stop **developing**.

        They want to s start **writing tests**.

        They reckon it will take at least a fortnight.

        The decision is yours.

        What do you say.

        Yes. Or No?


        Not just hypothetical
        ------

        This isn't just a hypothetical question.

         I've been part of not one but *two* teams that said "enough is a enough",

        and asked for the time and space to put things right.

        - One team got a **Yes**.
        - The other team got a **No**.

        BOTH decisions were, in my view, wrong.


        The Art of Motorcycle Maintenance
        --------

        This is the motorbike I owned as a teenager.

        Is wasn't the most reliable machine. It seemed I spent about as much time fixing it as riding it.

        I had one key test that I'd do every time I came to ride it.

        I'd try to start it.

        I'd then go on to test...

        Come to think about it: that was about all I'd test.

        UNLESS it didn't start.

        Then I'd do other test:

        I might remove the spark plug and check that t I was getting a spark.

        If the spark didn't look very healthy, I might check the spark plug gap.


        Unit Tests
        ----

        Checking the spark plug gap is a great example of a **Unit Test**.

        It's a test of an **individual component** of a complex system.

        Like all good unit tests, it's **independent** of the rest of the system.

        (After all, the gap between here and here [the spark plug electrode gap] doesn't depend on anything else.)


        System Test
        ---

        Compare that with the test of "starting the motorbike".

        A running engine requires a huge number of components
        - including the spark plug - to work together to produce a result.

        The result being a running engine.

        It's a great example of a "**System Test**".

        It could also be described as a **Behavioural Test**.

        A running engine is one of the behaviours that the "User" of a motorbike expects it to exhibit.

        It could also be described as a **Blackbox Test**: we didn't have to gain access to
         the innards of the engine to perform the test. Indeed, we didn't have to know anything a
         bout the inner working of the motorbike to perform it.

        All we need to know are (1) the **inputs** that need to be supplied....

        - fuel on
        - neutral gear
        - little bit of throttle
        - operate the kick starter

        ..and (2) the **output** to look out for:

        - the sound of the running engine.


        Functional Tests
        -----

        Note that the very first test I mentioned - unscrewing the spark plug to check that I was getting a spark -
         is neither a **Unit Test**...

         ... nor it a **System Test** / **Behavioural Test** / **Black Box Test**.

        It falls somewhere between the two camps.

        Because I've unscrewed something, it's no longer a **System Test** (a test of the system as a whole).

        Nor can it be described as a **Black Box Test**. (We've "entered" the black box.)

        It's an example of a **Functional Test**: the expected *"function"* being the production of a spark.

        As a test it's slightly unsatisfactory:

        - A pass doesn't indicate that the engine will start.
        - A fail doesn't indicate the root cause of the problem.


        So a *pass* would lead us on to a **System Test** / **Behavioural Test** / **Black Box Test**.

        A fail would lead us to a (series of) **Unit Test**.

        Back to the Teams
        ----


        I still haven't told you about the two teams - the teams where one team got permission
         to write tests and the other didn't?

        I'll reveal all in the next episode.

        But I will give you a big clue.

        - One team asked to write **Unit Tests**
        - The other team asked to write **Behavioural Tests**.

        Talk to you next time.


23:
      slug: were-going-to-need-more-tests-tdd
      title: "Sh!t Software Developers Say: \"We're Going To Need More Tests\" - Part II"
      summary: How easy is to write Unit Test for an existing code base?
      date: 2016-02-17
      youtube_id: u560YnA3Eds
      body: |-

          Welcome back to our deep-dive into software testing.

          (If you missed **Part I** you can find it [here](http://www.developmentthatpays.com/posts/22-were-going-to-need-more-tests).)

          Today the focus is on **Unit Tests** and **Test Driven Development**.



      transcript: |-


          Welcome back to our deep dive into Software Testing.

          Today the focus will be on **Unit Tests** and **Test Driven Development**.

          If you missed the previous episode, there should be a link to it on or around this video.

          Assuming you're all caught up, let's get started.


          Impossible to test?
          -----

          I first came across unit testing in about 2008

          By that point, I'd been developing full time for a few years. I thought I had it down.

          But writing unit tests was hard. Damn hard. 10x harder than writing code.

          Depressing.

          I discovered over time that it wasn't my fault. Much of the stuff that I thought was impossible to test....

          ... really WAS impossible to test.

          It wasn't me after all!

          Why were the tests impossible to write?

          I was trying and failing to write a test for something that was not like... A SPARK PLUG!

          Remember we talked about testing the gap of the spark plug. That's a perfect example of a unit test.

          Another perfect example would be a test of its resistance.

          With the right equipment, we could even perform a unit test to confirm that it sparks.


          Test-ability
          -----

          All of these tests are possible because there's something special about a spark plug

          It's... TESTABLE!

          By design, it can be removed from the engine.

          It's one of the few things in the world that has a (more or less) standardised tool for removing it.

          If you have a socket set, the chances are that it  includes a spark plug socket...

          and the chances are very good that it fits the spark plugs on your car,  your motorbike - even your lawnmower.


          Now I'm not sure if spark plugs were designed to be **testable**. I think it's probably the case that spark plugs were designed to be replaceable...

          and testability came as a very useful side effect.


          Testable - by design
          ---

          It's been my experience, that things rarely evolve naturally to be replaceable/testable. They are replaceable/testable by design... or not at all.

          Nowhere is this more true than with software.

          I can say with a high level of confidence, that if your codebase does not have unit tests.... then your codebase consists largely of UNTESTABLE code.

          Which brings us nicely on to Test Driven Development.


          Unit Testing
          -----

          I thought it mean that your wrote all your tests ... and then started writing your code.

          If fact, you start by writing a FRACTION of a test.

          Then you write some code.

          Then you write a bit more of the test.

          Rinse and repeat.

          The code and the tests are born and grow together.

          The testability of the code is "built in".

          That's part of the payback for the (marginal) additional effort.

          There's more payback in the the test will now be executed hundred, thousands or even millions of times.

          (Many developers have things set up so that ALL the units tests run EVERY time they hit the save button.)


          Team update
          -----

          Remember our two teams?

          As I'm sure you've guessed by now, the team that asked to write tests... and got their wish...

          had asked to write units tests.

          We spent two weeks battling with untestable code.

          Tests were produced... but most were test of things that were easy-to-test, rather than things that were IMPORTANT to test.

          Our time would have been better spent on writing a different kind of test.

          A kind that can be applied to  any codebase.... no matter how "untestable" the code may be.

          ... and that's what we'll be looking at   in the next episode.

          Talk to you then.


24:
      slug: were-going-to-need-more-tests-bdd
      title: "Sh!t Software Developers Say: \"We're Going To Need More Tests\" - Part III"
      index: 24
      summary: Behavioural Testing and Behaviour Driven Development
      date: 2016-02-24 12:30
      youtube_id: o4Y--AOoh9k
      image: episode24_333.png
      body: |-

          Welcome back to our deep-dive into software testing.

          If you missed either of the previous parts, you can find them here:

          - [Part I](http://www.developmentthatpays.com/posts/22-were-going-to-need-more-tests)
          - [Part II](http://www.developmentthatpays.com/posts/23-were-going-to-need-more-tests-tdd)

          Today the focus is on **Behavioural Testing** and **Behaviour Driven Development**.

          Enjoy the video.


      transcript: |-

          Welcome back to our deep dive into Software Testing.

          Today we'll turn the spotlight on Behavioural Testing and Behaviour Driven Development.




          If you missed either of the previous episodes, there should be links to them on or around this video.

          Assuming you're all caught up, we'll get started.


          Enough!
          ----

          Back in Episode 20 I introduced you to this team, and the thing that happened waay too  often:

          The API would break. And three other teams would down-tools and wait. And hover.

          After going through the pain of this half a dozen times, we called "enough is enough"
          asked for a fortnight to put things right.

          To our astonishment, we were turned down.

          The End.


          A hero emerges
          ----

          Still watching?

          Great.

          Because what happened next was... rather wonderful.

          This guy - the lead developer - was ...

          determined.

          Like the rest of us, he was working long days and most weekends,

          Unlike the rest of us, he was spending his very limited free time to putting in place everything
           necessary to perform **behavioural testing**.

          Only when it had done so  did he share his plan with the team:

          "We asked. They said 'No'. We need to respect that."

          "But I believe we need those tests. So I'm going to start writing them. In my own time if necessary."

          "Anyone with me?"

          Of course we were.



          During office hours were worked on new features as before. With one caveat: each time we wrote a new
          feature, we wrote a behavioural test to go with it.

          Outside working hours, we started adding in behavioural tests for the *existing* features.

          I'll come back to the story in a moment.

          An example
          ---

          It's high time we had an example of a real behavioural test.

          Let's take the example of using a cash machine. One of the tests might go as follows:

          ```
          Given the account balance is £100
          And the card is valid
          And the machine contains enough money
          When the Account Holder requests £20
          Then the Cashpoint should dispense £20
          And the account balance should be £80
          And the card should be returned
          ```

          Couple of things to notice:

          1. It's written in plain english. There are no technical terms at all
          2. There are three sections:

          - Context
          - Action
          - Outcomes


          After a fortnight of very part time working, our tests were paying dividends. The system was more solid,
          and never again did we give the other teams any reason to down-tools.

          Unlike writing **Unit tests**, writing **behavioural tests** for existing code is not particularly difficult.

          There's no unscrewing to be done. No need for "independence"

          Indeed, the **interdependence** is the very thing we want to test!


          Behaviour Driven Development (BDD)
          -----

          As well as being great for existing codebases, behavioural testings is great for codebases that have yet to be written.

          That's what **Behaviour Driven Development - BDD - is all about.

          The test scenarios are written upfront, then developers... write code until the tests pass.


          Epilogue
          ---

          **Team A** was right to call "time out".

          It would be harsh to say that the Product Owners were wrong to give their agreement.

          They could hardly be expected to know that it's really, really difficult to write **Unit Tests** for an existing codebase.

          Did the new Unit Tests deliver benefit? Yes.

          Was the benefit significant. No.


          **Team B** was also right to call "time out".

          And business owners were oh-so-wrong to say "No".

          The business owners were extremely lucky that the team wouldn't take "No" for an answer.

          The existing codebase was, err, challenging, so the decision to write **Behavioural Tests** was a good one.

          Did the new Behavioural Tests deliver benefit? Yes.

          Was the benefit significant. **Absolutely**.



25:
      slig: kanban-origins
      title: Kanban Origins
      summary: From supermarket shelf to Toyota Corporation to Software Development
      date: 2016-03-02 12:30
      youtube_id: aeo1JcdHjGU
      body: |-

          The system that we know as "Kanban" can trace its roots back to the late 1940's.

          Has modern-day Kanban stayed true to its roots?

          Or have we thrown out the baby with the bathwater?


      transcript: |-


          This is a Kanban board

          How many Kanban cards do you see?

           Keep that number in mind.


          Back to the factory floor
          ----

          As you may know Kanban originated in the world of manufacturing.

          Here's a machine for processing... err... Things!

          Thinks arrive from the left, are processed through the machine

          And then move off to the right.

          So far so good.

          But what if things arrive at a greater rate?

          Slowly but surely things start to back up to the left of the machine.


          Excess Work In Progress (WIP) is expensive
          ----

          This build up is a problem. There's more work in progress that there needs to be.

          And that represents a cost to the business in a couple of ways:

          - There's money tied up in each of these Things
          - The Things are taking up floor space... which also has to be paid for.


          Mr. Taiichi Ohno
          ---

          This is the problem that **Mr. Taiichi Ohno**  of **Toyota** set out to solve.

          He borrowed a trick that he spotted in an american supermarket.

          Mr Ohno observed that store shelves were stocked with just enough product to meet consumer demand.

          The inventory would only be restocked when there was a visual signal - in this case, an empty space on the shelf.

          To transfer this to the factory, Mr. Ohno needed a way for one process to "ask" the *previous* process for more  stock.


          The Kanban Card
          -----

          Enter, you guessed it, the **Kanban card**.

          Our machine processes a thing...

          and despatches a Kanban card to the previous process.

          Kanban roughly translates as **signboard** or **billboard**.

          The Kanban card is a signal to the previous process to send a Thing along.

          Naturally, what's good for the goose is good for the gander.

          Our original machine is subject to the same rule:

          It should only be processing in response to demand.

          Meaning... another Kanban card.


          As thing stand, the work in progress is just about as low as it can be...

          ... but it's also slower than it might be.

          We can speed things up by allowing a - strictly limited - bit of Work In Progress.

          Notice that the additional things are held to the right of the process that's just processed it.

          That's important, because it means that each process is in control of its own Work In Progress.


          Kanban for Softwar Development
          ----

          Can you see how this relates to the (software development) Kanban Board?

          The **processes**... are **columns**.

          The **Things**... are the **tickets**

          The **Kanban cards** are... *nowhere to be seen!*

          Have we thrown the baby out with the bathwater?

          Not quite.

          The Kanban cards are with us in spirit if not in body

          The important part about the Kanban *system* is the **signalling**.

          This column *signals* its need for a ticket by virtue of its... err... **emptiness**.

          Much like the empty space on the supermarket shelf.



26:
      slug: get-a-grip-on-your-wip
      title: Get a Grip on Your W.I.P.
      index: 26
      summary: Limiting Work In Progress (WIP) is one of the cornerstones of Agile
      date: 2016-03-09 12:30
      youtube_id: p-cBY4L_y_s
      image: episode26_333.png
      body: |-

          Limiting **Work In Progress** (**WIP**) is one of the cornerstones of Agile.

          When WIP is **low**:

          - **Multitasking** goes down
          - **Feedback** improves
          - **Errors** get caught earlier

          Today we'll look at practical steps to bring your WIP down.


          Links mentioned in the video:

           - [Setting Jira WIP limits](https://www.atlassian.com/agile/wip-limits)
           - [Chrome extension for Trello](https://chrome.google.com/webstore/detail/kanban-wip-for-trello/oekefjibcnongmmmmkdiofgeppfkmdii)



      transcript: |-

          Limiting **Work In Progress** (WIP) is one of the cornerstones of Agile.

          When WIP is low:

          - Multitasking goes down
          - Feedback goes up
          - Errors get caught sooner

          Today we'll look at practical steps to bring your WIP down.


          Back to the factory floor
          -----

          Many of the systems we apply today in software development can trace their origins back to the factory floor.

          In many ways, we have it easy.

          If we want to change the layout of our "factory", we can do so with a white board marker.

          Or the click of a mouse.

          For example, it's easy to split a column into two columns.

          Splitting a machine in two. Not so easy.

          But the factory floor does have some advantages.

          When partly-processed stock builds up, it's obvious.

          In a factory, when you want to reduce the WIP, you could reduce the space available for WIP.

          Do it right, and it's a hard limit.

          Fill up the space here, and this machine has to be stopped.

          There's no if or buts.


          Practical steps
          ----

          In our Agile teams, we don't have such hard physical limits.

          But there are couple of things we can do to keep ourselves honest.

          And make teams responsible for their own WIP - more on that in a moment.


          1. Impose WIP limits
          ---

          - If you're using a physical board, make the columns shorter. Less space for cards.
          - If your using Jira, [set a WIP limit](https://www.atlassian.com/agile/wip-limits).
          - If you're using Trello: as far as I know, Trello does not support WIP limits. But there
          is a [Chrome extension](https://chrome.google.com/webstore/detail/kanban-wip-for-trello/oekefjibcnongmmmmkdiofgeppfkmdii) that adds the capability.


          2. Distinguish between "In progress" and "waiting"
          ------

          The first Kanban board I used in anger made a clear distinction between "waiting" and "in progress"

          Each column had a "buffer zone" on the left and an "in progress zone" to the right.

          It certainly does the job of distinguishing between waiting and in progress, but it's not perfect.

          Take a look at this board.

          There's a ton of work in the Test Team's buffer column.

          An un-enlightened observer might be forgiven for thinking that the Test Team is out of control.

          You and I know that the Test Team has done nothing wrong: it's the Dev Team that's out of control!

          We can make this explicit by swapping the "buffer" and "in-progress" zones.

          Same cards, same situation, slightly different board.

          But it's now obvious that it's the Dev Team has created the excess WIP.


          Buffer zones for Jira and Trello?
          ----

          We mentioned **Jira** and **Trello** earlier.

          I confess that I've only used "buffer zones" on physical boards - never on an electronic board.

          If you're have experience of adding buffer zones to a **Jira** or **Trello** , I'd love to hear from you.


27:
      slug: the-state-of-agile-address
      title: The State Of Agile Address 2016
      summary: My personal, biased and mis-informed rant on the State of Agile
      date: 2016-03-16 12:30
      youtube_id: Qx74BnANB6w
      body: |-

          It's "State of My Industry" month on LinkedIn, so I thought I'd weigh in with some personal, biased
          and (more than likely) misinformed views of the **State of Agile in 2016**.

          Are you optimistic about the future of Agile? Or do you have concerns?

      transcript: |-

          It's "State of My Industry" month on LinkedIn, so I thought I'd weigh in with some
          personal, biased and (more than likely) misinformed view of the state of Agile.


          Late to the (Agile) party
          ---

          I was a little bit late to the Agile party.

          The first time I heard the word was in 2012 when I walked in to the offices of **BBC Worldwide**.

          It was clear from the outset that these people we're "doing Agile". And they weren't doing it by halves:

          - Daily Stand-ups - daily at 10 am on the dot.
          - Sprint Planning - every second Monday. With Fibonacci cards, naturally.
          - Retrospectives - every second Friday. With Post-Its, guest presentations. Even a quiz.


          I say late the party, because Agile had been around a while.

          By the time I darkened the doors of the BBC,
          the Agile Manifesto had celebrated its 10th birthday. And DSDM was old enough to drive a car.

          Opinionated Agile
          ---

          it was the age of OPINIONATED agile.

          My team at the BBC was doing Scrum. And it was doing it PROPERLY.

          All the artefacts. All the rituals.

          The team later split in two.  One the teams moved over to Kanban. And did it... PROPERLY.


          Hippie vibe
          --

          Adoption of Agile through the noughties had been slow and steady. But from 2009 it took off.

          So I moved on from BBC Wolrdwide in 2014, it felt like EVERYONE was doing Agile.

          Something else had changed. The Opinionated Age had passed.

          Things had "loosened up". The entrenched positions of the previous age...

          - "Scrum is better than Kanban"
          - "Kanban is better than Scrum"

          ... gave way to something that had more of a hippie vibe:

          Scrum is cool. Kanban is cool. Scrum is good for you. Kanban is good for me.

          There was even some mix and match: a bit of Scrum here, a bit of Kanban here.

          Anything goes.


          The current State of Agile
          ---

          Today, you'll struggle to find a software development team that doesn't "Do Agile".

          I'm delighted at the QUANTITY of Agile.

          But I have concerns about the  QUALITY of Agile.

          There's too much "superficial Agile".

          - **Stand-ups** that are just meetings-performed-in-a-standing-position.
          - **Jira boards** that are just giant to-do lists.

          The problem with superficial agile is that ... it doesn't work very well.

          People who are new to software development - or are moving into an agile team for the first time -
          are likely going to wonder what all the fuss is about.

          That's if we're lucky.

          If we're unlucky, they'll mistake bad practices for good practices and spread them from  one organisation and take them to another.


          What do YOU think?
          ----

          I'm starting to sound more like a grumpy old man than usual...

          ... so I'm going to stop there and turn the discussion over to you.

          What do think about the current state of Agile?

          Have we sacrificed quality for quantity... or it is a case of the more the merrier?

          Let me know in the comments here: [https://www.youtube.com/watch?v=Qx74BnANB6w](https://www.youtube.com/watch?v=Qx74BnANB6w)



28:
      slug: the-joy-of-present-value
      title: The Joy of Present Value
      index: 28
      summary: Present Value is on of the most useful concepts in accounting and finance
      date: 2016-03-23 12:30
      youtube_id: j0PeW1MsyEM
      image: episode28_333.png
      body: |-

           **Present Value** (**PV**) is one the most useful concepts in accounting and finance. By the end of video, you'll
           be able to answer the question:

           **"Is a bird in the hand worth two in the bush?"**


      transcript: |-

          As you know, a bird in the hand is worth two in the bush.

          But is that two to the nearest whole number?

          Or is it two to three decimal places?

          Today we'll try to answer those questions using one the most useful concepts in accounting and finance:

          Present Value


          Alchemy
          -----

          "A bird in the hand is worth two in the bush" is one of the cleverest sayings of all time.

          In just 11 words it says so much.

          There's an element of **time**: 'now' versus 'later'

          And there's an element of **risk** or **uncertainty**: the certainty of what you have now, the uncertainty of what you may or may not have later.

          Then, it an act of pure alchemy, it transmutes **time** and **risk** into **worth**. Aka **money**.


          Income now vs. Income later
          ----------

          income now is worth more than income later.

          If I give you £100  **now**... it's worth £100.

          If I give you £100 **a year from now***... that's less valuable.

          Why?

          Well for one thing, you've missed out on a year of interest payments.

          Take £100 and put it in the bank in an account that provides 10% interest

          (I don't know of an account that offers such a good interest rate... but it keeps the maths simple.)

          Anyway... Put £100 in the bank now... and this will grow to £100 + 10% = £110 a year for now.

          We can say that £100 now *has the same value* as £110 a year from now


          Present Value (PV)
          ------

          Now this is where things get interesting:

          We can run the calculation in the opposite direction to work out the **Present Value** of a future payment.

          The £100 that I have promised to pay you a year from now has a present value of £90.91.

          Because we're moving from a large number to a smaller one, we no longer talk about an **interest rate**.

          Instead, we we talk about a **Discount Rate**.

          We could say that

          * "A payment of £100 a year from now may be discounted to a present value (pause to add 10% on screen) of £90.91 by applying a discount rate of 10%"

          More succinctly:

          * "£100 a year from now has a Present Value of £90.91 (at a discount rate of 10%)"

          We can apply similar calculations to any point in the future

          At year ten, the Present valve is just £38.55

          Let's fill in the rest of the years.

          At just over SEVEN years, the Present value of £100 drops to £50 - half of its initial value.

          If we run the numbers again with £500, it still drops to 50%  at just over seven years.

          It will drop to 50% at just over seven years whatever the initial value: the 10% discount rate sees to that.

          It doesn't matter if it's:

           * £100...
           * a monkey (£500) or... dare I say it...
           * a bird.

          Concluding remarks
          ----

          A bird in the hand is worth two in the bush,
          assuming the bird is extracted 7.27254 years from now
          given a discount rate of 10%


29:
      slug: the-joy-of-net-present-value
      title: The Joy of Net Present Value
      summary: Present Value is a powerful concept. Net Present Value (NPV) is even more powerful.
      date: 2016-03-30 12:30
      youtube_id: ektsXQkc7Og
      body: |-

           In the [previous episode](/posts/28-the-joy-of-present-value), we explored the wonderful world of **Present Value** (**PV**).

           In this episode, we'll put **Present Value** (**PV**) to work...

           ...with a little help from a spreadsheet.

           Then we'll move on to an even more powerful concept:  **Net Present Value** (**NPV**)


      transcript: |-

          Is it better to be paid quarterly or monthly?

          **Present Value** (**PV**) and **Net Present Value** (**NPV**) to the rescue!


          Introduction
          ---

          In the [previous episode](/posts/28-the-joy-of-present-value), we explored the wonderful world of Present Value.

          Today, we're going to do one more thing with **Present Value**,

          then we're going to move on to ask even more powerful concept:

          * **Net Present Value** (**NPV**)

          Maths Ahead
          -----

          I deliberately avoided maths and equations in the previous episode because
          I didn't want to maths to cloud the key principle of **Present Value**:

          * Income now is more valuable than income in the future

          Now that we've established that principle, it's time for  some gentle maths.

          Here's the equation for **Present Value**:


                                            Future Value
                        Present value    =  ------------
                                             (1 + R)^T

          Notes:

          * **R** in the **Discount Rate** expressed as a decimal. So 10% would be 0.1
          * **T** is the number of time periods.

          Let's just check that it all works for a very simple example:

          * a payment of £100 a year from now
          * an interest rate of 10% per annum

          So:

          * the Future Value is 100
          * R is 0.1
          * T is 1

          Which gives us


                                                100
                        Present value    =  ------------
                                            (1 + 0.1)^1


                                                100
                        Present value    =  ------------
                                               (1.1)^1

                                                100
                        Present value    =  ------------
                                                1.1


                        Present value    =  90.909090909090


          The present value is **£90.91** to the nearest penny.


          Time for a spreadsheet
          --------

          That's enough mental arthritic for one day. Time crank up Excel.

          I'll put the discount rate here

          This is the future value - £100
          The year is 1

          Now for the present value equation
          "="   select this present value cell
          divide by
          open brackets
          one plus ... the  Discount Rate

          Close the brackets
          Raise it to the power of the time period... Which is this cell
          Hit enter
          And there we have our 90.91

          Let's have some fun with this

          Fist thing to do is lock this value to this cell
          And now I can drag this along one cell
          Change this to 2
          And we get the present value of 100 paid two years from now

          Next, select all of these cells and drag to the right

          I'm a visual kind of guy, so I'm going to want to see a graph

          I'd encourage you to play around with the number to see how it changes be graph.


          Multiple payments
          ------


          Let's take the complexity up a step and look at **multiple** payments.

          You get a new job. At £120,000 per annum.

          You can choose to be paid monthly or quarterly.

          I'm guessing you'd prefer the first option.

          Let's see if your instincts are backed up with cold hard maths.

          I'll adjust the spreadsheet.

          Instead of ten years, we want 12 months: add a couple of columns.

          And we'll also need a discount rate for a month rather than a year.

          Let's choose 1%.  Not quite equivalent to 10% per annum... but it's a nice round number.

          It gets entered as 0.01

          120k a year is 10 k a month...

          I copy that value across

          We're interested in the total value, so let's add a sum here - 120,000 as expected

          And we also what the sum of the **Present Value** of all the payments.

          Now we need to compare that with being paid quarterly.

          First, I'll copy these rows

          And change the payments.

          30,000 here, here and here.

          Zero everywhere else

          The Present value of the quarterly payments is £112,250.

          The Present value of the monthly payments is £111,432.

          Looks like your instincts were correct. Congratulations!


          Net Present Value
          ------

          Let's move on - I'm keen to get to today's main event:  **Net Present Value**.

          So far we've looked at *income* - money that comes to you.

          What about money that you *pay out*?

          Would you rather pay 10k now, our in 12 months time.

          You're right.

          It's better delay outgoings as a long as possible.

          The present value of the future payment is reduced: the longer you delay the payment, the better it is for you.

          The equation for this is... exactly the same.

          If you pay £100 now... it costs you £100

          If you can delay the payment for a year, the present value of the payment drops to **£90.91**.

          (Sick of that number yet?)

          I am, of course assuming a **Discount Rate** of  - say it with me now - 10% per annum.


          Investment Opportunity
          ------

          Let's put this straight into action.

          If I come to you with an investment opportunity which means that you pay me

          * £50 now, and
          * £50 in 3 months time

          And I pay you back in two payments:

          * £60 in 10 months time
          * £60 in 12 months time

          £100 out, £120 in. To mere mortals it might look like a good deal.

          But you have Present Value superpowers. Not to mention the power of a spreadsheet.

          Lets start with the income:

          I'll add in a note here so that we can keep track.

          Then I'll add in the income payments: £60 here, £60 there.

          Now for the outgoings.

          As I said, the equations are the same, so I can copy these rows, update the label.

          Make sure it's using the right time period, clean up, and we're ready to enter the expenses.

          Minus £50 here and minus £50 here.

          We now have all the numbers we need to calculate the NET Present value for each month: the NET of each income and  expense

          I'll add another sum at the end of this row

          This is the **Net Present Value** of the entire "deal": **£9.03**.

          A positive NPV is a good thing, so my investment opportunity can be considered to be a good deal.

          Assuming, that is that 1% is the correct Discount Rate.

          But what if it isn't? What if the correct discount rate is 2%

          If I change the discount rate to 0.02,  the NPV drops below zero. It no longer looks like a attractive deal.

          All of which begs the question:

          * "What is the correct discount rate?"

          We'll jump onto that very question in the next episode.


30:
      slug: the-risk-of-discount-rate
      title: The "Risk" of Discount Rate
      summary: It's not as straightforward as it looks
      date: 2016-04-06 8:30
      youtube_id: 3iLenVuXAgM
      body: |-

           The calculations for **Present Value** (PV) and **Net Present Value** (NPV) look so elegant...

           ... so perfect...

           ... so pure.

           But hiding beneath the surface is a Great Big Hack: the **Discount Rate**!

           Links mentioned in the video:

           - [Present Value (PV)](https://youtu.be/j0PeW1MsyEM)
           - [Net Present Value (NPV)](https://youtu.be/ektsXQkc7Og)
           - [Quora on determining Discount Rate](https://www.quora.com/What-discount-rate-do-you-use-in-your-DCF-valuation)

      transcript: |-

          **Net Present Value** (**NPV**) in one of my favourite concepts in all of finance and accounting.

          But lurking beneath the elegance of its equations...

          ... is a slippery little fellow.

          I'm referring, of course, to the **Discount Rate**.

          Quick recap
          ----

          We've come a long way in the last couple of episodes:

          "A bird in the hand is worth two in the bush" led us to the incredibly useful concept of **Present Value** (PV):

          The idea that money now is worth more than money in the future.

          We then turned out attention to expenses: money going out

          And discovered exactly the same rule applied:

          An expense now has a greater value than an expense in the future.

          We then took a step beyond the concepts...

          ... and we started to perform some calculations.

          We even cranked up a spreadsheet to help us perform a multitude of calculations.


          Danger Ahead
          ----

          As we moved from concept to calculation...

          we crossed a threshold.

          We unwittingly strayed into dangerous waters.

          This equation looks so elegant...

          ... so mathematical...

          ... so pure.

          But lurking within it is something that's far from pure.

          The **Discount Rate**.


          Breaking it down
          ----


          The Discount rate can be considered to consist of two elements:

          1. The Time Value of Money
          2. The Risk Premium


          The Time Value of Money
          -----

          Let's start with the easy one: the Time Value of Mone.

          For our purposes here, we'll consider this to be the RISK FREE time value of money.

          Its value in percentage points is the INTEREST RATE you could get from a risk-free bank account.


          Risk Premium
          ----

          Here's the FT's definition:

          "The additional return an investor expects from holding a risky asset rather than a riskless one"

          Unfortunately, that doesn't really help us to put a number on it.

          One man's **sure thing** is another man's **unacceptable risk**.

          Over the years many different methods for determining risk premiums have been proposed.

          If you'd like to get a sense of the the variety - and complexity  - you could do better than take
          a look at this page on Quora [this page on Quora](https://www.quora.com/What-discount-rate-do-you-use-in-your-DCF-valuation)

          You'll be pleased to know that I don't intend to go into any of these details;

          My intention today was to make the point that picking an appropriate Discount rate can be tricky.

          More Art than Science.

          All is lost?
          ---

          If Discount Rate is so tricky to determine,

          does this undermine everything we've looked at so far?

          Not at all.

          Finance and accounting folks are wiley creatures.

          They are  not the types to let little bit of uncertainty hold them back.

          They've come up with cunning ways around the uncertainty.

          We'll take a look at a couple of them in the next episode.

          Talk  to you then.




31:
      slug: the-joy-of-internal-rate-of-return-irr
      title: The Joy of Internal Rate Of Return (IRR)
      summary: A neat way to side-step Discount Rate
      date: 2016-04-13 8:30
      youtube_id: REexsZE4mJo
      body: |-

          The **Risk Premium** element of **Discount Rate** is tricky to determine.

          If only there was a way to side-step the issue:

          **Internal Rate of Return** (**IRR**) to the rescue!

          <h3>Videos mentioned in this episode:</h3>


          - [The Joy of Present Value (PV)](https://youtu.be/j0PeW1MsyEM)
          - [The Joy of Net Present Value (NPV)](https://youtu.be/ektsXQkc7Og)
          - [The "Risk" of Discount Rate](https://youtu.be/3iLenVuXAgM)

      transcript: |-

          You have a project.

          You've calculated its **Net Present Value** (**NPV**).

          It's negative :(

          But it's not *very* negative.

          Question:

          Should you proceed?


          Previously
          ----


          We've done **Present Value** (PV)

          We've done Net **Present Value** (NPV)

          We've dissected **Discount Rate**

          If you've missed any of these, you'll find links on or around this video:

          - [The Joy of Present Value (PV)](https://youtu.be/j0PeW1MsyEM)
          - [The Joy of Net Present Value (NPV)](https://youtu.be/ektsXQkc7Og)
          - [The "Risk" of Discount Rate](https://youtu.be/3iLenVuXAgM)

          We've almost reached my level of incompetence....

          ... but there's one one more concept I want to share with you:

          **Internal Rate of Return** - **IRR** for short.



          Converting Annual Rates to Monthly Rates
          ----

          Before we get to that, there's  one bit of mathematically trickery

          that glossed over in the last episode...

          and which will be helpful for this one.


          Remember last time that we spoke about splitting Discount Rate into the components:

          - Time Value of Money
          - Risk Premium

          This help us, because at one of these - the **Time Value of Money** - can be looked up.

          Let's continue our tradition of picking easy numbers
          and say that the interest rate that we could have got in a risk-free bank account is 7%.

          Then we use our skill and judgement to choose a **Risk Premium** of 5%.

          That gives us a **Discount Rate** of 12%.

          Excellent.

          With just one small problem. These is an *annual* rate.

          Unless we're looking at a 10 year project, we've going to want the *monthly* rate.

          Easy right?

          12 months in a year: that's 12% divided by 12 months. Which gives us 1%.

          Sounds right. **But it's wrong**.

          Don't blame me. It's compound interest that's to blame.

          The equation to convert from an annual rate (R) to a monthly rate is this little beauty:

          ```

          Monthly Rate = (1 + R)^(1/12) - 1

          ```

          (It looks a nightmare, but remember in practice a it will be a spreadsheet doing the heavy lifting.)

          Plugging in 12%  - 0.12 - gives us:  0.009488793

          That's 0.95% per month


          Evaluating Projects
          ---

          Now that we can convert between annual and monthly discount rates,

          we're ready for the main job of today: *evaluating projects*.


          Let's start with this one: (Project A.)

          Bad news, it has a negative Net Present Value.

          However... it's not *very* negative.

          It's close enough... to make us think twice.

          After all, the **Risk Premium** part of **Discount Value** is... a bit of a guess.


          We need something to reduce our reliance on the absolute value the **Discount Rate**.

          One way is to have another project to compare it to.

          The **NPV** of this project - Project B - is positive.

          We have a winner.

          Or do we?

          What if we're wrong about this Discount Rate?

          One quick check we can do it to
          vary the Discount Rate a few percentage points in either direction
          and see it changes the picture.

          Drop the Discount Rate by 4%, and Project B is still a winner.

          Increase the Discount Rate by 4%, and again Project B is the winner.

          Looks like Project B is a good choice... and will still be a good choice if we've a little bit off with our Discount Rate.


          Untidy
          ----

          This is all a bit fiddly. A bit messy.

          Surely the finance and accounting types have come up with something more... elegant?


          It would be great if we could have conversations like:

          - Project A will provide a return of X%
          - Project B will provide a return of Y%



          The great news it that we can do exactly this.

          Time to introduce **Internal Rate of Return** (**IRR**).


          Internal Rate of Return (IRR)
          ----


          The **IRR** is defined as the the Discount Rate that

          reduces the  **Net Present Value** of a project to **zero**.


          This may sound counter-intuitive - it certainly did for me -

          so let's try it on Project A and Project B


          This is all set up in a spreadsheet. it's very easy to change the Discount Rate

          to change the  **Net Present Value** (**NPV**)

          With a little bit of fiddling around, I can decrease the Net Present Value to zero.

          The Discount Rate that achieves this - 0.0864   - 8.64%  - is the **Internal Rate of Return** for this project.

          If we do the same for Project B, we get - 0.263   - 26.3%

          We now have our neat little statements:

          - Project A has a Internal Rate of Return of 8.64%
          - Project B has a Internal Rate of Return of 26.3%

          All very tidy.


          Next time
          ----

          Thanks for watching.

          In the next value we'll see if we apply what we've learned to a very specific question:

          - **"Is Agile is more profitable than waterfall?"**

          Talk to you then.


32:
      slug: is-agile-more-profitable-than-waterfall
      title: Is Agile More Profitable Than Waterfall?
      summary: Follow the money and you'll see that Agile has a massive headstart.
      date: 2016-04-20 8:30
      youtube_id: 8i2YY4a_jPg
      body: |-

          Have you ever heard of **Discounted Cash Flow Analysis**?

          It's not nearly as dull as it sounds.

          And when you **get it**, you'll see that **Agile** has a massive head-start over **Waterfall** when it comes to profitability.

          That's what today's episode is all about.

          (Don't worry, there are no complex equations or boring spreadsheets to wade through.)

          <h3>Videos mentioned in this episode:</h3>

          - [The Joy of Present Value (PV)](https://youtu.be/j0PeW1MsyEM)
          - [The Joy of Net Present Value (NPV)](https://youtu.be/ektsXQkc7Og)
          - [The "Risk" of Discount Rate](https://youtu.be/3iLenVuXAgM)
          - [The Joy of Internal Rate of Return (IRR)](https://youtu.be/REexsZE4mJo)

      transcript: |-


          Warning.

          In the next few minutes you'll see graphic images of finance and accounting concepts.

          Please don't be alarmed.

          There will be no  equations. And no spreadsheets.

          Some viewers may shocked to find that the concepts presented are... rather awesome.

          If that is the case for you, support resources will be presented at the  end of this video.


          The Time Value of Money
          ---------


          Money now is worth more than money later.

          Everything we'll look at today stems from this single principle.

          If in was to give you £12,000...

           - Would you rather have it now?
           - Or a year from now?

          I'm sure you'd prefer to have it now.

          The "Money now is worth more than money later" thing is, for most people, intuitive.

          We even have a saying for it:

          - "A bird in the hand is worth two in the bush."


          Apples and oranges
          ------

          What if I offer you £10,000 now OR £12,000 later. Which would you prefer?

          I'm sure you'd say that that depends on what I mean by "later".

          If "later" if tomorrow... You'd wait for the  £12k

          If "later" is 50 years from now... You'd take the £10k now.

          But what if "later" is 6 months? Or 18 months?

          That's far from clear-cut.

          The difficulty is this:

          We need to be able to compare a **present value** - the £10,000.

          With a **future value** - the £12,000.

          These are two different things.

          And as any schoolboy will tell you, you can't compare apples and oranges.

          We need to be comparing apples and apples.

          A **present value** with a **present value**.

          Luckily, there's a way to do exactly this.


          Present Value
          ---

          Finance types talk about **discounting** future cash flows down to their **present value**.

          It's something that can be calculated.

          Here's how the value of the £12k payment various over time:


          The further we travel into the future, the less it's worth.

          Each of these bars moves us a year into the the future.

          By the time we get  20 years into the future, £12,000 is worth... hardly anything at all.



          If we do the same thing, but taking small steps...

          - each of these bars represents a month -

          ... then at a certain point the

           the PRESENT value of £12k drops below £10k.


          Multiple Payments
          ---

          We can apply the same approach to multiple payments.

          Here we have four quarterly payments of £3k.

          We already know that adding up the £3k's would be a case of mixing...

           - oranges,
           - bananas,
           - blueberries and
           - plums

          What wee need to do is  DISCOUNT each of the payments down to their PRESENT values.


          once that's done, we have values that can be compared - and totalled.

          This total is known as the Net Present Value. NVP for short.


          Hold on a second...
          ----

          I know what you're thinking.

          These pretty graphs are all very well...

          But what about the whole  **Agile** / **Waterfall** thing?


          Let's see.

          Agile and Waterfall are *projects*...

          and *projects* involve *expenses... and *income*.


          Income and Expenses
          -----


          Let's start with a super-contrived example of a project:

          It has expenses of:

           - £10,000 a month for 6 months.

          At that point, the product is launched and the  money starts pouring in:

           - £10,000 a month for the following 6 months.

          £60k out. £60k in. Break even?

          Not so fast: we need to do a spot of discounting.

          There's now more RED than green.

          This project has a negative Net Present Value.

          That's not a good thing.



          If we could magically switch this around...

          so that the income came before the expenses...

           This time,  discounting works in our favour.

          There's more green than red.

          The net present value this time is positive.


          The Timing of Cash Flows
          -------

          Interesting isn't it?

          The only thing that changed was the TIMING of the cash flows.

          That - and that ALONE - made the difference between loss and profit.

          There's something else that I'd like you to take from this. To MAXIMISE profit:

          1. Get you income in as early as possible
          2. Delay your payments as long as possible.



          Ready for some Waterfall and Agile?


          Waterfall
          ----

          It's a while since I've worked on a Waterfall project,

          but as I recall it went something like this:

          We'd start with a small small project team and get to work.

          We might spend a couple of months On research

          Two or three months on design.

          Then the build.

          As the launch date loomed, we'd panic and add people.

          Finally. we'd be ready for the GRAND LAUNCH.

          And the money would start rolling in.

          (Never quite at the level we would have hoped... but that's another story.)

          Ideally, we look at the entire lifetime of the project, but 24 months is enough for our purposes.


          On to Agile.


          Agile
          -----


          The team stays more or less constant throughout - and there's no "Big Bang" launch.

          So the costs - the outgoings - are much more stable. I'll draw them in now for the whole period.

          In good Agile fashion, a first version of - whatever-it-is - comes out early.

           It doesn't bring out a huge amount of money...

          ... But that's not the point.

          The point of the first release It's to learn. To get feedback.

          To take that feedback and improve and develop the product.

          The next version does better.

          The team keeps working. The sales keep increasing.


          And the winner is
          --------

          Two different projects.

          Two very different sets of income and expenses

          However...

          You'll be SHOCKED to learn that I've fixed the numbers:

          For each project, if you add up the greens, add up the reds, take one from the other.... you'll get the same number.

          The net value of both projects is EXACTLY the same.

          The difference between the projects is the size of and TIMING of the cash flows.

          its time for some discounting.

          Ready... Three two one... GO

          The winner is... the Agile project.


          The Waterfall project got off to a great start by keeping its expenses low at the beginning - and the delaying some of the big costs.

          While Agile started (an continued) with high costs, is was able to get some green on the board early on.

           Although the income was modest, the DISCOUNTING APPLIED to those early flows was also modest.

          After the Big Bang launch, Waterfall was quick to ramp up its income.

          But these income flows didn't turn up until 12 months after the project started

          the income flows were subject to fairly heavy discounting.



          Conculsive Proof?

          I'd love to claim that this is proof positive that Agile is more profitable than Waterfall.

          Of course, we haven't come anywhere near to proving it.

          It is, for my money, one of the strongest arguments for the Agile approach.

          Starting small. Test the market. Make improvements.

          Rinse and repeat.

          It gets green on the board early and that - as we've seen today - makes all the difference.



          Finally...
          ----

          What we've been looking at today falls under the general banner headline of "Discounted Cashflow Analysis" (DCF).

          I'm not a finance type - far from it - but I think DCF is extremely cool.

          It's high up on my  this-should-be-taught-in-schools list.

          If you'd like to dig a little deeper, I have not one, not two, not three but four videos for you to check out:

          - [The Joy of Present Value (PV)](https://youtu.be/j0PeW1MsyEM)
          - [The Joy of Net Present Value (NPV)](https://youtu.be/ektsXQkc7Og)
          - [The "Risk" of Discount Rate](https://youtu.be/3iLenVuXAgM)
          - [The Joy of Internal Rate of Return (IRR)](https://youtu.be/REexsZE4mJo)

          Thanks you very much for watching. I hope you enjoyed watching it as much as I enjoyed putting it together.

          And don't forget to click subscribe for a new video every week.

          Talk to you next time.

33:
      slug: state-of-agile-address-peoples-voice
      title: State of Agile Address - People's Voice
      index: 33
      summary: Here's what YOU think about the current state of Agile
      date: 2016-04-27 8:30
      youtube_id: GDEvnbr0sJw
      image: episode33_333.png
      body: |-

          Here's what YOU think of the current state of Agile.

          (If you missed the original "State of Agile Address", you can find it [here](/posts/27-the-state-of-agile-address).)

          Thank you to all who commented: *this video would not have been possible without you!*


      transcript: |-

          A few weeks ago, I presented my **Grumpy Old Man's State of Agile Address**.

          And I asked for you views. Here's what YOU think of the current state of Agile.

          You did not disappoint.


          Intro
          -----


          March was state of **#MyIndustry** month on **LinkedIn**.

          I couldn't resist weighing in with my own "**[State of Agile Address](/posts/27-the-state-of-agile-address)**".


          The Ages of Agile
          -------

          I talked about the "ages" of Agile:

          The age of "**Opinionated Agile"**,  when people were staunchly Srum,  or staunchly Kanaban.

          The age of "**Free Love Agile**". Where anything goes.

          Then I got grumpy.

          I suggested than things had gone to far.

          I referred to it as the age of "**Superficial Agile**".

          And then I stopped.

          And turned it over to you.

          Was I right to be grumpy?

           Not at all according to you,  Josef:

          "Agile is alive, well and evolving"

          Gerhard, you agreed.

          "Alive and kicking @$$"

          Josef, you went on to say that

          "DevOps is probably the next level of sophistication"

          Chakravarthy, you agreed. You added that

          "Continuous Delivery will be the next big step in Agile Delivery"

          (DevOps isn't an area we've covered here on DTP. But it's high time we did. Watch this space.)

          Chakravarthy, you also went on to say that

          "The full potent;oaf Agile will only be realised when flexibility in the model is accepted and encouraged."


          Brian, you reminded us that

          "Agile can be a great tool when applied correctly."

           I loved your comment about using the right tool for the job.

          "Like any tool....   Agile has its limits."


          Darren, you expressed concerns about Agile being "lost in translation"

          Meaning that the C-suite "get it"... but then they

          "... chuck it over the wall."

          I loved what you said about Project Managers deciding that

          "Agile is okay ... as long as a tonne to heavyweight processes are thrown at it!

          Nigel thank you for reminding us that Agile isn't a universal panacea.

          You said that there are a lot of teams

          "... for whom it wouldn't add much benefit."

          You talk about a spectrum of teams

          "using (or mis-using) the tools"

           right through to

          "effective Agile organisations."

          The latter requiring

          "buy-in and support from above"

          Without it, there will be issues when

          "Agile-ness collides with the rest."


          Your last sentence is so powerful that I'm going to read it out in full.

          "For Agile to mature and continue to grow
          it must continue it's escape outside of software development
          to become the way that an organisation manages it work."


          Thank you!
          ------

          Thanks again to everyone who took the trouble to comment.

          This Grumpy Old Man is feeling better about the future.

          Let's keep the conversation going.

          What do you think of the comments expressed here?

          Anything to add?

          Take a moment to leave a comment below.

          I'm going to give the last word to, you Lucille.

          Is a Agile and kicking?

          "Absolutely alive and evolving into something amazing."

          What a lovely thought.

          Talk to you next time.


34:
      slug: minimum-viable-product-mvp
      title: "Minimum Viable Product: You're Doing It Wrong!"
      summary: Time to bring Minimium Viable Product into Sharp Focus
      date: 2016-05-04 8:30
      youtube_id: rmGOBzpn_98
      body: |-

          Have you come across **MVP**?

          It stands for **Minimum Viable Product**.

          I thought I understood it...

          ... until I saw a hand-drawn sketch that blew my mind:

      transcript: |-

          The best definition I've seen for "**Minimum Viable Product**" is not a set of words.

          It's a sketch.

          A sketch that encapsulates the concept so perfectly...

          ... that it went **viral**.


          Frank Robinson
          --------

          Frank Robinson coined the term "Minimum Viable Product" in 2001.

          The idea - at least at a superficial level - is simplicity itself:

           - Get a version of the product in front of a customer early as possible.

          Not with the aim of generating early income - though that is no bad thing - but with the aim of LEARNING.

          The chances are that you've heard of Minimum Viable Product before today..

          ... and that when you heard it, you immediate "got it".

          As Frank himself said:

            - “When I first said ‘minimum viable product’ I never had to repeat myself. The words went viral right before my eyes.”

          BUT...


          Is it Viable?
          -------

          Just because something is easy to grasp, doesn't mean it's easy to do.

          It's not easy. Far from it.

          Here's the problem:

          We - dev teams, lead developers, product owners... even business owners - usually have an idea of what the "ultimate" product might look like.

          Ask us to come up with a minimum version and we'll hack of a feature here and a feature there..

          What we end up with will certainly be MINIMAL: that's the easy part.

          But will it be VIABLE?

          That's the tricky part.


          Enter Henrick Kniberg
          -----

          A gentleman by the name of Henrick Kniberg

          captured the difference between the two perfectly in this image:

          Here we have minimal, but not viable (until we get the final step).

          And here we have minimal AND viable every step of the way.


          In a recent blog post, Henrik said that he was surprised that his image went viral.

          I'm not surprised at all.

          I think it's genius.


          Next time.
          -------

          Next time we'll take a look at some "real world" **Minimium Viable Products**.



35:
      slug: top-3-minimum-viable-products
      title: 3 Awesome MVPs
      summary: The best of the best of MVPs
      date: 2016-05-11 8:30
      youtube_id: xPJoq_QVsY4
      body: |-

          What are the best **Minimum Viable Products** (**MVP**s) of all time?

          I've no idea ;)

          But I do have some favourites. Here are my Top 3:

      transcript: |-


          What are the best **Minimum Viable Products** of all time?

          I've no idea (!)

          But here are three of my favourites.

          Top 3
          -----

          Today, we're going to take a look at three of my favourite examples of Minimum Viable Products (MVPs).

          Before diving in. let's establish some ground rules for a "proper" MVP

          - It's got to be *Minimal*
          - It's got to be *Viable*
          - And it's got to be a *Prod...*

          Actually No, it **does not** need to be a *Product*.

          (I'll be showing you a great example of a non-product in a minute or two.)

          Some have argued that the word "Product" in **MVP** is unhelpful.

          **Steven Cohn** has made a strong case for the word *"Experiment"*.

          I agree. But for now let's stick with  the "P" and temporarily re-define it to.... *Pre-meditated*.

          Meaning that the MVP must be a deliberate attempt to learn about the market.

          This rules out cases that look like MVPs in retrospect, but were really full products that -
          to everyone's surprise - developed into something big.

          Let's get going.

          No. 3 - Buffer
          ------


          **Buffer** is a application that makes it easy to share content on social media.

          Here's what they put on the their site.

          A test, certainly. But it falls short of an **MVP** in my opinion.

          Their next test was better.

          They slotted this page in-between the other two pages.

          Now visitors to the website are not just saying "This is interesting"

          They're saying "**I want to BUY this**".

          Okay, there's nowhere to input your credit card details.

          But anyone who got this far was at least prepared to think about parting with their money.

          As co-founder **Joel Gascoigne** said:

          "After this result, I didn’t hesitate to start building the first minimal version of the real, functioning product."


          Minimal? - certainly

          Viable? - yes

          Pre-mediated? - check

          Buffer's current valuation is something close to $400 million


          No. 2 - Dropbox
          ----

          Dropbox, as I'm sure you know, is a file synchronisation service.

          Edit a file on your desktop...

          ... and seconds later its updated on all of your other devices.

          Rewind to the early days.

          The team - entirely composed of techies - had the basic synchronisation working.

          That was the easy bit.

          The hard bit was going to be to achieve the same trick on pretty well every platform:  Mac, Windows, iPhone, etc.

          Given that the team was all techies, you'd have put money on them diving straight in.

          But CEO **Drew Houston** did something surprising.

          He made a video.

          The video - just three minutes long - demonstrated the synch process end to end.

          But it was more than just a demo: it was full of techie in-jokes... designed to appeal to early adopters.

          It worked like a charm

          In Drew's words:

          “It drove hundreds of thousands of people to the website. Our beta waiting list went from 5,000
          people to 75,000 people literally overnight. It totally blew us away.”


          Minimal? - Yes

          Viable? - Not a product that could be used, but a product that could be *demonstrated*.

          Pre-Meditated? - Yes


          Dropbox went  on to do quite well. It's current value stands between $5 and $10 BILLION.



          No. 1 - Zappos
          ----

          It's 1999.

          Co-founder Nick Swinmurn wanted to build an online store for shoes.

          But would people use it?

          Here's how he went about finding out.

          He popped down to lis local shoe shops

          he went into the shops and...

          ... I sh!t you not...

          he PHOTOGRAPHED PAIRS OF SHOES!

          The photos were uploaded to a super-simple website.

          If someone clicked on the button to buy a pair

          Nick would pop down to the store and...

          BUY THE SHOES!

          Zero infrastructure.

          Zero inventory.


          Minimal? - definitely

          Viable? - This time it's not even up for discussion. Most definitely: real customers; real money changing hands; real shoes!

          Pre-meditated? Check.

          Zappos went on to do quite well: it was acquired by Amazon in 2009 for a cool $1.2 billion.


          Your thoughts, please!
          ----

          **Buffer**, **Dropbox** and **Zappos**. Three of my favourite **MVP**s.

          What do you think of my choices?

          Any you disagree with? Let me know in the comments.

          And I'd also like to hear about *your* favourites.

          Again, let me know in the comments. I'll feature the best ones in a future episode.

          Thanks for watching. Talk to you next time.





36:
      slug: wizard-of-oz-mvp
      title: The Wizard Of Oz Minimum Viable Product
      summary: "Pay no attention to the man behind the curtain"
      date: 2016-05-18 7:10
      youtube_id: VPVec5eupTY
      body: |-

           *Minimum Viable Products* come in all shapes and sizes.

           Today we going to look at the one with the coolest name.

           Join me as we throw back the curtain on the  **Wizard of Oz** MVP.


      transcript: |-



          Minimum Viable Products come in a range of shapes and sizes.

          Today we going to look at the one with the coolest name.

          Join me as we throw back the curtain on the  **Wizard of Oz** MVP.



          1999
          ----

          Its 1999.

          You're thinking about selling shoes online.

          You know that people buy shoes.

          What you *don't* know is whether people will buy shoes **online**.

          (It's never been tried before.)

          You devise a cunning plan.

          You go into town.

          You go into shoe shops.

          And you ... err... take photographs of shoes!

          Later, you upload the photographs to a website.

          What happens when someone buys a pair of shoes?

          No problem.

          You pop back into town.

          You pop back into the shoe shop.

          And you buy the shoes!

          You then ship them off to the customer.


          Did you spot it?
          -----

          This, as you might have spotted, it the story of Zappos.

          It's the best example I know of a **Wizard of Oz** MVP.

          So called, because from the customer's point of view, everything appears to be in place.

          The customer has no idea that behind the scenes it's a little bit... manual.

          in Zappos case, all of the going to town, going into shops, taking photos...

          .... going back to town, going back into shops, buying shoes...

          is hidden behind the curtain.

          From the customer's point of view, the Zappos business looked and operated like a fully functional eCommerce operation.


          Different world?
          -----

          I love the Zappos story, with one teeny weeny reservation.

          It's not directly applicable to my world.

          For one thing, it's a long time since I dealt with a physical product.

          Perhaps you thought the same thing?

          Let's look a couple of other examples.

          In each case, see if you can guess what's behind the curtain.


          Aardvark
          ----

          Aardvark was about connecting people with **questions**  to people with **expertise**.

          Behind the curtain?

          Perhaps a neural network of stunning complexity?

          No.

          *A bunch of Interns!*


          Cardmunch
          ------

          Cardmunch is an app that scans business cards and converts them into contacts.

          It somehow managed to transcribe blurry photos of business cards better than any other Optical Character Recognition (OCR) system at the time.

          A technological breakthrough?

          Nope.

          Behind the curtain?

          *Amazon’s Mechanical Turk!*

          Amazon’s Mechanical Turk has a curtain of its own. What's behind the green curtain?

          *People!*


          Minumum vs. Viable
          -----

          One final thought before we click our heels together and head back to Kansas:

          David J Bland says the hard part about MVPs is that

          "... you decide what’s Minimum...

          ... the customer determines if it is Viable."

          A **Wizard of Oz** MVP all but guarantees a high "viability" rating: the "minimal" (usually *manual*) process is hidden behind the curtain.

          The customer, has no idea that corners have been cut.


37:
      slug: mvp-worked-example
      title: "Case Study: Building a Real Life-Minimum Viable Product"
      summary: "Cool: an MVP in MDF!"
      date: 2016-05-25 7:10
      youtube_id: cIe8Xt9nByY
      body: |-

          In the last couple of episodes, we've been looking at **Minimum Viable Products**.

          In this episode, I'm going to attempt to make one.

          Out of MDF.

          Really.


      transcript: |-


          Wood. Check.

          Saw. Check.

          Drill. Check.

          Glue. Check.

          Let's build a Minimum Viable Product.


          Hi, this Gary.  Welcome to Development That Pays.

          In the last couple of episodes, we've been looking at Minimum Viable Products.

          Today I'm going to attempt to make one.

          Out of MDF.


          This is my iMac. I love this machine.

          It's a pleasure to use.

          But the REAL reason I love it, is that it's the first computer that's pretty enough to be allowed into the kitchen.

          It looks good.

          At least it did when it first arrived.

          Then we added a printer.

          Then an external drive. Then an another external drive.

          And with them came lots and lots of wires.

          My wife - Sheila - has a word for this peripheral proliferation:

          Unacceptable.

          The challenge, then, is to hide all the guff...

           without too much impact on the usability of the printer.

          I can feel an MVP coming on.


          Eric Ries has a good definition of MVP:

          "[the] version of a new product which allows a team to collect the maximum amount of validated learning about customers with the least effort"

          The operative words here are: "Validated learning" and "Least effort"

          Neither of these are natural for me.

          (I'm more of a zero research, over-engineered kind of guy.)

          This is going to be... challenging.

          My first port of call: Sketchup.

          Do you know Sketchup? I really like it.

          But I have to be careful not to get carried away and go too far with the design.

          It's important to be... minimal.

          Here's a printer and two drives.

          Think the printer will go on top with the drives underneath.

          Going to make a shelf big enough of the printer.

          Plus a bit of extra space around the edge.

          Move it into place.

          And copy it.

          And...

          And nothing. I have the basic measurements I need

          to build something.

          A here it is.

          Question: is this a minimum viable product?

          It's minimal, certainly.

          But as we've talked about previously,

          it's the customer that decides what's viable.

          Sheila wasted no time in letting me know that this was NOT viable.

          Not even close.

          Let's call it a prototype.

          Printer fits. Excellent.

          Better just check that everything is useable.

          Pop a spot of paper in the printer.

          Ah. That's vexing.

          Hadn't thought of that.

          Either I'm gong to have to make the cabinet much taller...

          or....

          .... get a new printer!

          Never liked that old printer anyway :)

          This one's about the same size, but it has paper tray. Perfect.

          Ah.

          This is annoying.

          Didn't spot that bit before I bought it.

          Tried to remove the out-feed thing without success.

          I'm going to have to change the design to accommodate it.


          Glad I didn't lavish too much love an attention on the first prototype,

          It's really been sliced and diced

          It's morphed into something ...

          ... really ugly.

          If anything, it's less viable than it was before.

          The new printer fits. Excellent.

          We'll need a flap on the front.

          Another issue I hadn't foreseen: the new printer has screen

           that's a bit hard to see. I'll need to have a head-scratch about that.

          Back to SketchUp.

          This is more or less a cleaned-up version of Prototype II.

          The drop-down flap is more work than I'd hoped for, annoyingly

          But I'll save some time by having this lower panel fixed:

          access to the drives - and the inevitable (wiring) spaghetti - will be from the back.

          Think at last I'm ready to build an MVP!


          Join me next time to see how it turns out


38:
      slug: mvp-worked-example-2
      title: "Case Study: Building a Real-Life Minimum Viable Product - Part 2"
      summary: "Cool: an MVP in MDF. Again!"
      date: 2016-06-01 7:05
      youtube_id: 4_sL_tOu2Xc
      body: |-

          Wood has been cut, glued and screwed. The spray gun has made and appearance. Hardware has been fitted.

          The big question is, have we learned anything useful about software development?

          It's time for the BIG REVEAL!

      transcript: |-


          Wood has has been cut, glued and screwed.

          The spay gun has made an appearance.

          Hardware has been fitted.

          It's time to reveal the "MDF MVP"



          Hi this is Gary.

          Welcome to Development That Pays

          And welcome back to the the second part of the Minimum Viable Product build.

          If you missed Part 1, you should find a link on or around this video.


          I don't think I need to say it, but the point of the exercise was not to encourage you to take up carpentry.

          No, the point of the exercise was to, hopefully, uncover something useful about the process of creating an MVP.

          Something that would be just applicable in my  "day job": software engineering.


          I *did* learn.

          In ways that surprised me.

          My experience of Step 6 - the final build of my MVP - was especially... weird.



          Step 1
          ----

          This was the "back of a fag packet" level of design.

          Compare this with other things I'd done in SketchUp,

          and you'll see that I was holding back, trying to me "minimal"


          Step 2
          -----

           Again, so minimal by my standards.

          I even went as far as missing out one of the shelves!

          In terms of viable...

          I knew the printer would fit - I'd taken the dimensions directly from  SketchUp

          But there was an "unknown unknown"

          (I'm sure you spotted it. But I didn't)

          The damn paper feed!

          In the language of  software development: the prototype passed the "unit tests" of:

          - wide enough
          - high enough
          - deep enough.

          But it failed the "behavioural tests" of

          - "as a user, I must be able to load  A4 paper"
          - "as a user, I must be able to print on  A4 paper... and catch the paper as it comes out of the printer"

          Step 3
          ----

          I thought long and hard about how get around the paper problem...

          ... but I wasn't happy with any of them.

          So it was out with the old (printer) and in with the new.

          Think that's what the Lean community would refer to as a "pivot".


          Step 4
          -----

          This second prototype  served a couple of purposes:

          - match dimensions of the new printer
          - extend the "prototyping" to include the wheels (which I did with four sticks of wood!)
          - And to check the overall height, to make sure it would fit under the table.

          These were all about ensuring that the thing would be viable.

          I also  uncovered another "unknown unknown": the difficulty in seeing the printer's display panel.




          Step 5
          ----

          Spet 5 took me back to SketchUp for the final time.

          Although the eagle eyed among you may have spotted
          that I snuck in an extra shelf. What can I say.
          It's not easy for me to me "Minimal"



          At this point you might be thinking: "Hold on a second, this is just prototyping?"

          Yeah. I had that thought too.


          I think we're okay: the ideas of "minimal" and "viable", I really took them to heart.

          They became my "prime directives"; I was much more focussed than usual on creating something
          that would be viable. And I tried (not always successfully) not to embellish.


          So, yes, it's prototyping.

          But it's been prototyping for an MVP, rather than for a PRODUCT,

          And the two feel different.

          Talking of feeling different. Time to Step 6.


          Step 6
          ----


          Okay. This was weird.

          I've built a lot of stuff.

          But this build, it was different.

          It  FELT  different.

          I once heard someone talk about operating as if you have "one foot on the accelerator and one foot on the brake"

          That's how it usually feels when I'm building something.


          Guess is because I'm building...

          and designing...

          and wondering-if-I'm-building-thing-right-thing the whole time.

          Not this time.

          I just got on and built it.

          Just like that.

          Forward gear all the way.

          I suppose with a couple of prototypes behind me - and "just" an MVP in front of me
          (rather than an must-be-completely-perfect-final-product) - means there's really nothing left to worry about.

          It's an incredibly satisfying mode to get in to.


          The Reveal
          ---

          it's time for the  big reveal.

          Viable?

          It "works" for me:

          - My disk drives are hidden away and protected.
          - The printer is fairly easy to use.
          - The grab-handle was a nice touch. It makes opening easy. But its real purpose is to give a better view of the display

          And my key client - my wife, Sheila -  likes it too:

          - the printer is hidden
          - The disk drives are hidden
          - Before there were nine cables in plain sight. Now there's just one.

          She didn't say the word, but I know what she meant:

          VIABLE!



39:
        slug: my-dad-the-agile-coach
        title: My Dad... The Agile Coach?!?
        summary: My dad knew nothing about Agile. Or did he?
        date: 2016-06-08 7:05
        youtube_id: tCbeLauIKew
        body: |-

            My dad was a DIY genius. What he didn't know about woodworking wasn't worth knowing.

            But Agile? He knew nothing about Agile.

            Or did he...


        transcript: |-


            This is my dad.

            He was a master of DIY and woodworking genius.

            But Agile. He knew nothing about Agile.

            Or did he?



            Hi, this is Gary

            Welcome to Development That Pays


            Take a look at this:


            What I want you two to do

            just to confirm you do know the basics

            is to cook me a [..] omelette

            Show me something I can eat and be happy with

            "Slightly overcooked."

            Slightly?

            Tastes like [..] rubber

            Both over-cooked

            That was sh!t. By any standards.




            Chef Ramsey's  Omelette Test has the dual merits of

            1. sounding easy and

            2. being not easy at all.

            An equivalent test for the DIY world must be *hanging a shelf*.


            So that's what we're going to have a crack at today.

            Here's the shelf... and here's the wall.

            I'm going to hang it twice

            Once using a method that made sense to my 19 year-old self.

            Then I'm going to hang it again, using the method my dad taught me.


            It sounds mundane, but what it can teach you about AGILE may just BLOW YOUR MIND



            Just before we jump in, please be assured that I know that DIY isn't the world's greatest
            spectator sport, so I'll be fast-forwarding through the boring stuff.


            The shelf is to be positioned so that its "top Middle"

            On this mark.

            Here's a more technical view of the shelf, showing the 4 screw holes.

            I'm going to start my taking a couple of measurements.

            - Distance between the screw holes horizontally
            - Distance from the top to the top screw hole
            - Distance between the screw holes vertically.


            Now to transfer the dimensions to the wall.

            I'll  use a spirit level to draw a perfectly horizontal line through the centre mark.


            Now measure HALF the distance between the screw holes, in both directions.


            Spirit level again for two vertical lines


            Measure down from the top

            Then again for the vertical distance between the screw holes.

            repeat for the other side.

            Next time for a spot of drilling...

            which is hard to draw, so I'm going to cheat and switch to a side view.

            Two holes for the left side

            Two for the right side.

            In with the wall plugs

            Offer up  ( - think that's the  technical term)

            offer up the shelf

            In with the first screw

            In with the second...

            Oh dear.

            Perhaps I measured incorrectly

            Perhaps I made a mistake when I transferred the measurements to the wall

            Maybe it was the drilling:

            The  walls in my house are more than 100 years old: it's hard to be accurate.

            Chances are that each of the holes is a bit off.

            And Murphy's Law dictates that they won't all be off by the same amount in the same direction.

            No, Murphy will see to it that they are off in distance and direction such as to maximise my displeasure!

            Even if a do manage to to shoe-horn all four screws in...

            I would be surprised if...

            No. It's not level.


            I'll bring my dad in a second.

            Before I do, here's a list of the steps I just went through

            - I measured the shelf
            - Transferred the measurement to the wall
            - drilled the holes
            - fitted the wall plugs
            - Fitted - or attempted to fit -  the screws.
            - Then - and only then - a final check for level.

            Is is just me, or does this looks a tiny tiny bit... WATERFALL?

            Hmmm.




            Let's move on to look at my dad's method.

            It's only fair to warn you that my dad had a super-power when it comes to DIY projects.

            He was better than anyone I've known in spotting the ONE thing that is important in any project.

            For this project, it would take him a millisecond to realise that the  ONE thing that's important is that the shelf be level.


            Oh... and he was pretty good at NOT measuring. Keep an eye out for how often he DOESN'T measure.


            First step... mark the of the middle of the shelf.

            (He'd do this without any form or rule or tape measure, believe it or not.)

            Shelf onto the wall.

            Align the marks.

            Spirit level. Perfectly flat.

            mark the position of ONE hole.

            Drill the hole

            Wall plug in

            Offer up the shelf

            Screw in the screw. But not tight.

            Spirit level again.

            Adjust the shelf until it's flat

            Hold in place

            mark position top hole on the right hand side

             rotate the shelf

            drill the second hole

            press in the wall plug

            rotate the shelf

            and screw in the second screw.

            Tighten both screws

            CHECK FOR LEVEL

            Not quite right?

            Loosen the screws.

            Gentle tap

            (My dad called this "offering encouragement")

            CHECK FOR LEVEL

            Tighten both screws

            CHECK FOR LEVEL

            From here on it's all downhill:

            mark the positions of the last two screws.

            Off with the shelf

            drill the holes

            in with the plugs

            Back in with the TOP TWO screws.

            Check for level / offer encouragement as necessary

            tighten the screws

            CHECK FOR LEVEL

            in with the bottom two screws.

            And one final check of level

            At this point, a formality.

            Spot on.

            Nice one, dad.




            If I show you all the steps,
            it's quite clear that there are a lot of them.

            There was very little in the way of mass production.

            The last two screws were handled together... but other than that...

            If a I squish up the tasks, I think you'll notice something interesting.

            There's a pattern: a bit of work... followed by a check for level.

            repeated again and again.

            Correct me if I'm wrong, but this looks...

            AGILE!



            To me, this is nothing short of a revelation.

            My natural inclination - as a rank amateur - was to hang the self using a WATERFALL PROCESS

            My dad's natural inclination - as a craftsman with 60+ years experience - was to hang the shelf using an AGILE PROCESS

            Mind. Blown.



            I'm tempted to leave it there.

            But  first shelf - the fitted-by-Waterfall shelf - is still wonky.

            Clearly, something went wrong.

            I know I screwed up... But I don't know where.

            Did I go wrong measuring the shelf?

            Did i go wrong with marking out?

            Did I go wrong drilling the holes?

            No idea.


            This puts me in the uncomfortable position of having to do better..

            Without knowing *where* to be better

            Contrast that with my dad's process.

            If at any point the "check for level" fails,

            it's OBVIOUS what has gone wrong.

            It's clear what has to be re-done.

            And it's a small amount of work that has to be re-done.


            Thanks for watching.

            Talk to you next time.


40:
        slug: agile-vs-waterfall
        title: Agile vs Waterfall
        summary: What needs to be true for Waterfall to win?
        date: 2016-06-15 7:05
        youtube_id: 8Nrw8pho6cY
        body: |-

            In the [previous episode](/posts/39-my-dad-the-agile-coach) my 19 year old self took on my dad
            in the classic DIY challenge of hanging a shelf.

            - My process was **Waterfall**
            - My dad's process was **Agile**

            My dad's Agile process won by a landslide.

            But why did it win?

            And are there cases where Waterfall would be victorious?

            Enjoy the video!


        transcript: |-


            [Previously](/posts/39-my-dad-the-agile-coach) on Development That Pays...

            My 19 year old self took on my dad at the classic DIY challenge of hanging a shelf.

            To no one's surprise, my dad won

            It was not just a victory of *experience* over *enthusiasm*.

            It was also a victory of **Agile** over **Waterfall**.

            Was Waterfall destined to lose?

            Or could it have claimed victory?

            What has to be true for Waterfall to win?




            Hi this is Gary.

            Welcome to **Development That Pays**.

            If you missed the last episode...

            ... you may decide that you were glad that you missed it.

            Because we spent the entire time attaching this shelf

            to this wall.

            Not once...

            but twice.

            My method of hanging the shelf  - very much a Waterfall approach -

            scored high on *efficiency*:

            - I measured everything
            - marked everything
            - drilled everything
            - screwed in all the screws


            But it scored badly in *effectiveness*: the result was a wonky shelf.


            My dad's process was was much more iterative - much more **Agile**.

            - He marked one hole
            - He drilled ONE hole
            - He fitted one plug
            - He fitted one screw [And so on...]


            He checked for level multiple times, so it came as no surprise that the end result was also level.


            It was a fair fight: my dad's method won fair and square.

            But it did make wonder: why did it win?

            And could there be situations where a Waterfall approach would be victorious?


            Let's change the parameters a bit: instead of the challenge being to hang a shelf, the
            challenge now is to hang 20 identical shelves.


            My dad's process is awesome for a single shelf, but for 20 shelves it's far too much work.

            His process is *bespoke*.

            I need something more "cookie cutter".

            I've come up with this jig; I think it's going too make all the difference.

            Match this mark to the centre mark on the wall

            Adjust for level... using the built in spirit level.

            Press it firmly against the wall: the rubber backing keeps it in place.

            The drill guides ensure that the holes are in exactly the right location.

            It also ensures that the hole is drilled at right angles to the wall.

            Drill all 4 holes.

            Remove the jig

            4 plugs in

            Offer up the shelf

            In go the screws - but not too tight.

            Final check for level.

            Tighten the screws all the way.


            Not just a job done well.

            But a job done quickly.

            **Waterfall** just beat **Agile**.

            Why did Waterfall win?

            Clearly, the jig was the enabler here.

            But in order for the jig to work as expected,

            at least two things must be true:

            1. All of the walls must be reasonably flat

            if they're not, then the  jig won't "stick" to the wall.

            2. All of the shelves are identical

            if they're not, the holes drilled in the wall won't line up with the holes on the shelf.


            Notice that neither of these conditions is necessary for my dad's process to work:

            his process will always work: on flat walls; on bumpy walls; with shelves of all shapes and sizes.



            So it would appear that it's all about **predictability**.

            If the steps can be predicted with a high level of confidence

            - for example, if it's an activity that we've completed many times before -

            then a Waterfall process is likely to be the best choice.


            Conversely, if the level of confidence is low

            - for example, if we're attempting something for the first time -

            then an Agile process is going to pay dividends.


            Agile and Waterfall. Horses for courses.

            Many thanks for watching. Talk to you next time.


41:
        slug: tdd-vs-bdd
        title: TDD vs BDD
        summary: Can the principles of Test Driven Development (TDD) and Behaviour Driven Development (BDD) be applied to a simple DIY challenge?
        date: 2016-06-22 7:05
        youtube_id: 4QFYTQy47yA
        body: |-

            In a [previous episode](/posts/39-my-dad-the-agile-coach) I took on the challenge
            of hanging a shelf using a **Waterfall** process.

            **It did not go well**.

            But it did make me wonder if *testing* would have saved the day:

            - Can the principles of **Test Driven Development** (**TDD**) be applied to hanging a shelf?

            - And can the principles of **Behaviour Driven Development** (**BDD**)  be applied to hanging a shelf?

            Let's find out!


        transcript: |-



            I tried to hang this shelf on this wall.

            I made a mess of it. The shelf was wonky.


            Could **Test Driven Development** - or even **Behaviour Driven Development** - have saved the day?


            Shelving
            -----


            A couple of episodes ago, I went through the process of hanging a shelf in what looked suspiciously like a **Waterfall process**:


            - I did all of the measuring
            - all of the transferring
            - all of the drilling
            - popped in all of the wall plugs
            - and brute-forced the screws in.


            Alas, the end result was not good: the shelf was not level.

            But it got me thinking.

            Could tests have saved the day?

            - Is it possible to hang a shelf in a **test-driven** way?
            - Is it possible to hang a shelf in a **behaviour-driven** way?

            I think we should find out.


            Test Driven Development (TDD)
            ----


            Here's me hanging a shelf in my waterfall-like style.

            Let's stop it... there.


            Here's an opportunity for a test:

            I could come back at any time and check that the line really is level.

            That could be the first unit test.

            More marking and measuring.

            Stop there.

            Lots of opportunities for unit tests here: one for each of these measurements.

            What happened next? Oh yes...

            I drilled all the holes. I popped in all the wall plugs.

            Stop.

            This is certainly a point where the unit tests could - and should - be performed.

            But it's actually a few steps *too late*.

            I've done far too much work between tests.

            Lets rewind a bit.

            Drill *one* hole (only). And perform the  "unit  tests" to ensure the hole went in in the right place.

            If the test fails -  if the hole has gone in the wrong place - now's the time to fix it: there's no point
             in continuing until all the tests pass.

            Once the tests are passing, we can move on.

            Drill another hole. Run the tests. Correct as necessary.

            And so on until we have all four holes drilled - and tested.

            In with the four plugs.

            No harm in repeating the "unit tests"... but it's most likely that all would pass.

            And we're now in a position to finish the job.

            In go the screws.

            Unfortunately, it's no longer trivial to run our unit tests.

            But there is another test we can run: we can check for level.

            And given that we've had "green lights" up to this point, the chances are that this test will pass too.

            And it does. The shelf is perfectly flat.


            Behaviour Driven Development (BDD)
            ---

            So much for **Test Driven Development**; what about **Behaviour Driven Development**?

            A shelf is a bit passive. It doesn't have have much in the way of behaviours.

            But if we are generous with our definitions, we could say that a desirable behaviour is that
            anything that are put on it should not slide off.

            Or put it another way, the shelf should be *level*.

            It can be argued, then, that testing the shelf for level is not only a **unit test**; it's also a *behavioural* test.


            In the sequence we've been through, this "behavioural  test" was the last thing that we did. AFTER all the work had been done.

            The very opposite of "behaviour driven".

            Is behaviour driven development even possible in this case?

            Turns out that the method my dad used to hang a shelf looks a lot like a behaviour-driven process:


            First step is marking the centre of the shelf.

            We could have a test for that - to verify that the mark really is in the centre of the shelf. That would be a unit test.

            (It's the first and last time we'll come across a unit test in the sequence.)

            Moving on...

            Check for level. That's the **behavioural test**.

            There it is again.

            This time it fails.

            Again, no point in continuing until "all the tests are passing". A quick tap with a mallet.

            Run the tests again  - this time passing. Which means we can move on.

            There's the behavioural test again. And again one final time.

            Success!
            ---

            Would you believe it:

            It *is* possible to hang a shelf in a test-driven development way.

            AND its *also* possible to hang a shelf in a behaviour-driven way.

            Which is better?

            I have my opinion... but I'd much rather hear from you.

            Please take a moment and let me know in the comments below.

42:
        slug: agile-product-ownership
        title: Agile Product Ownership
        summary: A perfect primer on Product Ownership from Henrik Kniberg
        date: 2016-06-29 7:05
        youtube_id: 3qP27HEkHE8
        body: |-

            I have a treat for you: a practically-perfect-in-every-way primer on **Agile Product Ownership**
            from none other than **Henrik Kniberg**.

            You can thank me later ;)

            **PS** Here's the link to [Henrik's video](https://www.youtube.com/watch?v=502ILHjX9EE)


        transcript: |-

            I think it's high time that we turned the spotlight on the **Product Owner**.

            If you Google for "Product Ownership", the first result is a rather nice definition:

            <pre>
            "The Product Owner (PO) is the member of the team
            responsible for defining Stories and prioritizing
            the Team Backlog so as to streamline the execution
            of program priorities, while maintaining conceptual
            and technical integrity of the Features or components
            the team is responsible for."
            </pre>

            I don't have a problem with any of that, other than it's a bit... dry.

            Scrolling down, there are some image results.

            (If you're a product owner yourself, I'm sure you'd approve of this one)

            But it's this one that I've brought you to see.

            You may recognise the style: it was drawn by **Henrik Kniberg** - the same guy that drew the **Minimum Viable Product** illustration that we featured in a previous episode.

            If a click through to the page, it's a video. And believe me when I tell you that it's no ordinary video: it's as close as I think you can get to a perfect primer on Product Ownership

            It covers a lot of ground, including:

            - Vision...
            - Stakeholders...
            - User Stories
            - Capacity
            - Automated Testing / Continuous Integration
            - WIP Limits
            - Product Backlog
            - The importance saying "No"
            - Backlog Grooming
            - Risk
            - Customer Value / Knowledge Value
            - Estimating / Forecasting
            - Technical Debt
            - and Multi-team Projects

            Definitely work 15 minutes of your time.

            Do yourself a favour: grab a hot beverage and sit down and [watch the  video](https://www.youtube.com/watch?v=502ILHjX9EE).

            If you like the video, make sure to give Henrik a thumbs up, then come back here and let me know your thoughts.

            That's it for this time. Join me next time for more Product Owner-related loveliness.


